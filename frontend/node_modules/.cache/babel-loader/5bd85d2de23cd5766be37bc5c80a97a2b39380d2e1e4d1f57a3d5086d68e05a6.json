{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin_gpt1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection, useDroppable } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n\n  // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n  // Override the merged-message class with over-message if the message is both merged and being hovered over\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n\n  // Add a blue background when the message is being dragged, unless it's already green (merged)\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n\n  // If the message is merged, keep it green even when dragging\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }, this);\n};\n\n// Define a trash can droppable area\n_c = MessageBubble;\nfunction TrashCan() {\n  _s();\n  const {\n    setNodeRef\n  } = useDroppable({\n    id: 'trash-drop'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"trash-drop\",\n    ref: setNodeRef,\n    children: [\"trash\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 14\n    }, this), \"trash\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n}\n_s(TrashCan, \"/d4Ga7WVHYMQQz0EoPcZUXruM0I=\", false, function () {\n  return [useDroppable];\n});\n_c2 = TrashCan;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s2(SortableMessageBubble, \"InVr0b5Mi061/rJry+Zf96inIeQ=\", false, function () {\n  return [useSortable];\n});\n_c3 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s3();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  //   State for knowing if anything is being dragged\n  const [isDragging, setDragging] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue(''); // Clear input field after message is sent\n\n    // Create the message history with roles for ChatGPT\n    const messageHistory = [...messages.map(msg => ({\n      role: msg.sender === 'user' ? 'user' : 'assistant',\n      content: msg.text\n    })), {\n      role: 'user',\n      content: inputValue\n    } // Add the new message to the history\n    ];\n    try {\n      // Send the user message and previous messages to the backend\n      const response = await axios.post('http://localhost:5000/api/generic_bot', {\n        messageHistory // Send the full context including previous messages\n      });\n\n      // Get the bot's reply from the response\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: response.data.reply,\n        // Use the reply from the backend\n        sender: 'bot'\n      };\n\n      // Update the messages state with the bot's reply\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    } catch (error) {\n      console.error('Error fetching reply from the backend:', error);\n    } finally {}\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true\n    };\n\n    // Remove the active message and replace the over message with the merged message\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\n    updatedMessages[overIndex] = mergedMessage;\n    return updatedMessages;\n  };\n\n  // Auto-generate new messages with delay\n  const generateFutureUserMessage = index => {\n    setTimeout(() => {\n      const newUserMessage = {\n        id: Date.now().toString() + index,\n        text: `Alternate timeline message ${index + 1}`,\n        sender: 'user'\n      };\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, newUserMessage];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Add a delay for the user message\n  };\n  const generateFutureBotMessage = index => {\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString() + index,\n        text: `Bot reply to: Alternate timeline message ${index}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, botReply];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Delay for bot response\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //   if something is being dragged at any time\n  const handleDragMove = () => {\n    //set state to know something is being dragged\n    setDragging(true);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n\n    // set state to know nothing is being dragged\n    setDragging(false);\n    if (!over || active.id === over.id) {\n      return;\n    }\n    console.log(\"intersect\" + over.id);\n    let reorderedMessages;\n    let insertionIndex;\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n\n    // if the thing it intersects with on drop is the trash can\n    //delete the message and any after it\n    if (over.id === \"trash-drop\") {\n      reorderedMessages = messages;\n      insertionIndex = activeIndex;\n      reorderedMessages.splice(insertionIndex);\n    }\n    //if the thing it intersects with on drop is a message, merge and then reorder\n    else {\n      const overIndex = messages.findIndex(msg => msg.id === over.id);\n      const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n      if (isOverThreshold) {\n        // Merge messages\n        reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n        insertionIndex = overIndex;\n      } else {\n        // Simple reorder\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n        insertionIndex = overIndex;\n      }\n    }\n\n    // remove the history\n    const remove = reorderedMessages.length - insertionIndex - 1;\n    // Remove the last 'indexDifference - 1' number of messages\n    if (remove > 1) {\n      reorderedMessages = reorderedMessages.slice(0, -remove);\n    }\n    // Update the display by setting the new messages\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    //get how many messages need to be generated\n    const generateAmount = remove;\n    console.log(\"Insertion at:\", insertionIndex);\n    console.log(\"need to generate:\", remove);\n\n    // Start generating messages with delay\n    const baseIndex = reorderedMessages.length;\n    let generatedCount = 0;\n    let i = 0;\n    while (generatedCount < generateAmount) {\n      if (generatedCount % 2 === 0) {\n        generateFutureUserMessage(baseIndex + i);\n      } else {\n        generateFutureBotMessage(baseIndex + i);\n      }\n      generatedCount++;\n      i++;\n    }\n\n    //print it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n      index: index + 1,\n      text: msg.text\n    })));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragMove: handleDragMove,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)), isDragging && /*#__PURE__*/_jsxDEV(TrashCan, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n};\n_s3(ChatBox, \"LNmL1dWxjpWxeK6u13DLMCbx700=\");\n_c4 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"TrashCan\");\n$RefreshReg$(_c3, \"SortableMessageBubble\");\n$RefreshReg$(_c4, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","useDroppable","SortableContext","arrayMove","useSortable","CSS","axios","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","TrashCan","_s","setNodeRef","id","ref","_c2","SortableMessageBubble","_s2","attributes","listeners","transform","transition","style","Transform","toString","_c3","ChatBox","_s3","messages","setMessages","inputValue","setInputValue","setDragging","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","prevMessages","order","length","messageHistory","map","msg","role","content","response","post","botReply","data","reply","error","console","updateMessageOrder","index","mergeAndUpdateMessages","activeId","overId","activeIndex","findIndex","overIndex","activeMessage","overMessage","mergedMessage","updatedMessages","filter","generateFutureUserMessage","setTimeout","newUserMessage","generateFutureBotMessage","handleDragMove","handleDragEnd","event","active","over","log","reorderedMessages","insertionIndex","splice","isOverThreshold","rect","top","height","current","translated","remove","slice","generateAmount","baseIndex","generatedCount","i","collisionDetection","onDragMove","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c4","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin_gpt1.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, rectIntersection, useDroppable } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport axios from 'axios';\n\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n    let bubbleClass = message.sender === 'user' \n      ? 'user-message' \n      : message.sender === 'bot' \n        ? 'bot-message' \n        : 'merged-message';\n  \n    // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n    // Override the merged-message class with over-message if the message is both merged and being hovered over\n    const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  \n    // Add a blue background when the message is being dragged, unless it's already green (merged)\n    const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  \n    // If the message is merged, keep it green even when dragging\n    const mergedClass = message.isMerged ? 'merged-message' : '';    \n\n    return (\n      <div className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}>\n        {message.text}\n      </div>\n    );\n  };\n\n// Define a trash can droppable area\nfunction TrashCan() {\n    const {setNodeRef} = useDroppable({\n        id: 'trash-drop',\n    });\n    \n    return (\n      <div id=\"trash-drop\" ref={setNodeRef}>\n        trash<br></br>\n        trash\n      </div>\n    );\n}\n\nconst SortableMessageBubble = ({ message }) => {\n    const { \n        attributes, \n        listeners, \n        setNodeRef, \n        transform, \n        transition,\n        isDragging,\n        isOver,\n    } = useSortable({ id: message.id });\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n  \n    return ( //return the message bubble in a div with the style and attributes of the message bubble\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\n      </div>\n    );\n  };\n  \n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n//   State for knowing if anything is being dragged\n  const [isDragging, setDragging] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n\n    setInputValue(''); // Clear input field after message is sent\n\n    // Create the message history with roles for ChatGPT\n    const messageHistory = [\n      ...messages.map((msg) => ({ role: msg.sender === 'user' ? 'user' : 'assistant', content: msg.text })),\n      { role: 'user', content: inputValue }, // Add the new message to the history\n    ];\n\n\n    try {\n      // Send the user message and previous messages to the backend\n      const response = await axios.post('http://localhost:5000/api/generic_bot', {\n        messageHistory, // Send the full context including previous messages\n      });\n\n      // Get the bot's reply from the response\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: response.data.reply, // Use the reply from the backend\n        sender: 'bot',\n      };\n\n      // Update the messages state with the bot's reply\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    } catch (error) {\n      console.error('Error fetching reply from the backend:', error);\n    } finally {\n\n    }\n  };\n\n  const updateMessageOrder = (messages) => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n  };\n  \n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true,\n    };\n\n    // Remove the active message and replace the over message with the merged message\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\n    updatedMessages[overIndex] = mergedMessage;\n\n    return updatedMessages;\n  };\n\n  // Auto-generate new messages with delay\n  const generateFutureUserMessage = (index) => {\n    setTimeout(() => {\n      const newUserMessage = {\n        id: Date.now().toString() + index,\n        text: `Alternate timeline message ${index + 1}`,\n        sender: 'user',\n      };\n\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, newUserMessage];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Add a delay for the user message\n  };\n\n  const generateFutureBotMessage = (index) => {\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString() + index,\n        text: `Bot reply to: Alternate timeline message ${index}`,\n        sender: 'bot',\n      };\n\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, botReply];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Delay for bot response\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//   if something is being dragged at any time\n    const handleDragMove = () => {\n        //set state to know something is being dragged\n        setDragging (true);\n    };\n\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    // set state to know nothing is being dragged\n    setDragging (false);\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    console.log (\"intersect\"+ over.id);\n\n    let reorderedMessages;\n    let insertionIndex;\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n\n    // if the thing it intersects with on drop is the trash can\n    //delete the message and any after it\n    if (over.id === \"trash-drop\") {\n        reorderedMessages = messages;\n        insertionIndex = activeIndex;\n        reorderedMessages.splice(insertionIndex);\n    }\n    //if the thing it intersects with on drop is a message, merge and then reorder\n    else {\n        const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n        const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n        \n        if (isOverThreshold) {\n        // Merge messages\n        reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n        insertionIndex = overIndex;\n        } else {\n        // Simple reorder\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n        insertionIndex = overIndex;\n        }\n    }\n\n    // remove the history\n    const remove = reorderedMessages.length - insertionIndex -1;\n    // Remove the last 'indexDifference - 1' number of messages\n    if (remove > 1) {\n      reorderedMessages = reorderedMessages.slice(0, -remove);\n    }\n    // Update the display by setting the new messages\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    //get how many messages need to be generated\n    const generateAmount = remove;\n    console.log(\"Insertion at:\", insertionIndex);\n    console.log(\"need to generate:\", remove);\n\n    // Start generating messages with delay\n    const baseIndex = reorderedMessages.length;\n    let generatedCount = 0;\n    let i = 0;\n    while (generatedCount < generateAmount) {\n      if (generatedCount % 2 === 0) {\n        generateFutureUserMessage(baseIndex + i);\n      } else {\n        generateFutureBotMessage(baseIndex + i);\n      }\n      generatedCount++;\n      i++;\n    }\n\n\n    //print it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n        index: index + 1,\n        text: msg.text\n      })));\n\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={rectIntersection} onDragMove={handleDragMove} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n            \n            {/* render trash can if things are being dragged */}\n            {isDragging && <TrashCan />}\n\n          </div>\n        </SortableContext>\n        \n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}