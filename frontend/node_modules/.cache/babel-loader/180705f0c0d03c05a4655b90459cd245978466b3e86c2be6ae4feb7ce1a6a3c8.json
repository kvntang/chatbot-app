{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    console.log('Active:', active); //for debugging\n    console.log('Over:', over);\n\n    // If active and over are the same, no need to merge\n    if (!over || active.id === over.id) {\n      console.log('No merge needed'); //for debugging\n      return;\n    }\n    const activeMessage = messages.find(msg => msg.id === active.id);\n    const overMessage = messages.find(msg => msg.id === over.id);\n\n    // Check if the mouse is over the target message\n    const isOverTarget = over && active.rect.current.translated.top + active.rect.current.translated.height / 2 >= over.rect.top && active.rect.current.translated.top + active.rect.current.translated.height / 2 <= over.rect.bottom;\n    let reorderedMessages;\n    if (isOverTarget) {\n      // Merge messages\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}` // Concatenate the text\n      };\n      console.log('Merged Message:', mergedMessage); //for debugging\n      console.log('Merging at location:', overMessage.order); // Print the order of the target message\n\n      // Remove the active (dragged) message and replace the over (target) message with the merged one\n      const updatedMessages = messages.filter(msg => msg.id !== active.id).map(msg => {\n        if (msg.id === over.id) {\n          return mergedMessage; // Replace the target message with the merged one\n        }\n        return msg; // Keep other messages unchanged\n      });\n\n      // Update message order\n      reorderedMessages = updatedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n    } else {\n      // Simple reorder\n      const oldIndex = messages.findIndex(msg => msg.id === active.id);\n      const newIndex = messages.findIndex(msg => msg.id === over.id);\n      reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n    }\n    console.log('Reordered messages:', reorderedMessages.map(msg => ({\n      order: msg.order,\n      text: msg.text\n    }))); //for debugging\n    setMessages(reorderedMessages);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","DndContext","closestCenter","SortableContext","arrayMove","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","handleDragEnd","event","active","over","console","log","activeMessage","find","msg","overMessage","isOverTarget","rect","current","translated","top","height","bottom","reorderedMessages","mergedMessage","updatedMessages","filter","map","index","oldIndex","findIndex","newIndex","className","children","collisionDetection","onDragEnd","items","message","SortableMessageBubble","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","style","Transform","ref","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    console.log('Active:', active); //for debugging\n    console.log('Over:', over);\n\n    // If active and over are the same, no need to merge\n    if (!over || active.id === over.id) {\n      console.log('No merge needed'); //for debugging\n      return;\n    }\n\n    const activeMessage = messages.find((msg) => msg.id === active.id);\n    const overMessage = messages.find((msg) => msg.id === over.id);\n\n    // Check if the mouse is over the target message\n    const isOverTarget = over && \n      active.rect.current.translated.top + active.rect.current.translated.height / 2 >= over.rect.top &&\n      active.rect.current.translated.top + active.rect.current.translated.height / 2 <= over.rect.bottom;\n\n    let reorderedMessages;\n\n    if (isOverTarget) {\n      // Merge messages\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}`, // Concatenate the text\n      };\n      console.log('Merged Message:', mergedMessage); //for debugging\n      console.log('Merging at location:', overMessage.order); // Print the order of the target message\n\n      // Remove the active (dragged) message and replace the over (target) message with the merged one\n      const updatedMessages = messages.filter((msg) => msg.id !== active.id).map((msg) => {\n        if (msg.id === over.id) {\n          return mergedMessage; // Replace the target message with the merged one\n        }\n        return msg; // Keep other messages unchanged\n      });\n\n      // Update message order\n      reorderedMessages = updatedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n    } else {\n      // Simple reorder\n      const oldIndex = messages.findIndex((msg) => msg.id === active.id);\n      const newIndex = messages.findIndex((msg) => msg.id === over.id);\n      reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n    }\n\n    console.log('Reordered messages:', reorderedMessages.map(msg => ({ order: msg.order, text: msg.text }))); //for debugging\n    setMessages(reorderedMessages);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}