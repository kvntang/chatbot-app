{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Downloads/chatbot-app/frontend/src/components/ChatBox_red.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// this is the component that renders the chat window and the input box\n// the bot will reply with the same message back to the user\n\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [activeId, setActiveId] = useState(null);\n  const [overId, setOverId] = useState(null);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDragStart = event => {\n    setActiveId(event.active.id);\n  };\n  const handleDragOver = event => {\n    setOverId(event.over ? event.over.id : null);\n  };\n  const handleDragEnd = event => {\n    setActiveId(null);\n    setOverId(null);\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      const oldIndex = messages.findIndex(msg => msg.id === active.id);\n      const newIndex = messages.findIndex(msg => msg.id === over.id);\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n\n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n      setMessages(reorderedMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            isActive: message.id === activeId,\n            isOver: message.id === overId\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"N6Fr4Oi6jMVNoWYSHPqV3L+mRVw=\");\n_c = ChatBox;\nconst SortableMessageBubble = ({\n  message,\n  isActive,\n  isOver\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    backgroundColor: isActive ? 'red' : isOver ? 'blue' : 'transparent'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nexport default ChatBox;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","DndContext","closestCenter","arrayMove","SortableContext","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","activeId","setActiveId","overId","setOverId","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","handleDragStart","event","active","handleDragOver","over","handleDragEnd","oldIndex","findIndex","msg","newIndex","newMessages","reorderedMessages","map","index","className","children","collisionDetection","onDragStart","onDragOver","onDragEnd","items","message","SortableMessageBubble","isActive","isOver","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","style","Transform","backgroundColor","ref","_c2","$RefreshReg$"],"sources":["/Users/kevin/Downloads/chatbot-app/frontend/src/components/ChatBox_red.js"],"sourcesContent":["// this is the component that renders the chat window and the input box\n// the bot will reply with the same message back to the user\n\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [activeId, setActiveId] = useState(null);\n  const [overId, setOverId] = useState(null);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDragStart = (event) => {\n    setActiveId(event.active.id);\n  };\n\n  const handleDragOver = (event) => {\n    setOverId(event.over ? event.over.id : null);\n  };\n\n  const handleDragEnd = (event) => {\n    setActiveId(null);\n    setOverId(null);\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      const oldIndex = messages.findIndex((msg) => msg.id === active.id);\n      const newIndex = messages.findIndex((msg) => msg.id === over.id);\n\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n\n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n\n      setMessages(reorderedMessages);\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext \n        collisionDetection={closestCenter} \n        onDragStart={handleDragStart}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble \n                key={message.id} \n                message={message} \n                isActive={message.id === activeId}\n                isOver={message.id === overId}\n              />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nconst SortableMessageBubble = ({ message, isActive, isOver }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    backgroundColor: isActive ? 'red' : isOver ? 'blue' : 'transparent',\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}