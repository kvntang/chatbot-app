{"ast":null,"code":"var _jsxFileName = \"/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { SortableItem } from './SortableItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botReply]);\n    }, 1000);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      setMessages(items => {\n        const oldIndex = items.findIndex(item => item.id === active.id);\n        const newIndex = items.findIndex(item => item.id === over.id);\n\n        // Check if the dragged item is being dropped on an adjacent item\n        if (Math.abs(oldIndex - newIndex) === 1) {\n          // Merge the messages\n          const mergedMessage = {\n            id: Date.now().toString(),\n            text: `${items[oldIndex].text} ${items[newIndex].text}`,\n            sender: items[oldIndex].sender // You might want to adjust this logic\n          };\n\n          // Remove the two original messages and insert the merged one\n          const newItems = [...items];\n          newItems.splice(Math.min(oldIndex, newIndex), 2, mergedMessage);\n          return newItems;\n        }\n\n        // If not merging, just reorder\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        strategy: verticalListSortingStrategy,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableItem, {\n            id: message.id,\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"upBoktlDDJdZwxHJ5WGttQLF6kk=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","closestCenter","KeyboardSensor","PointerSensor","useSensor","useSensors","arrayMove","SortableContext","sortableKeyboardCoordinates","verticalListSortingStrategy","SortableItem","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","sensors","coordinateGetter","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","setTimeout","botReply","prevMessages","handleDragEnd","event","active","over","items","oldIndex","findIndex","item","newIndex","Math","abs","mergedMessage","newItems","splice","min","className","children","collisionDetection","onDragEnd","strategy","map","message","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","$RefreshReg$"],"sources":["/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { SortableItem } from './SortableItem';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages([...messages, newMessage]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [...prevMessages, botReply]);\n    }, 1000);\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setMessages((items) => {\n        const oldIndex = items.findIndex((item) => item.id === active.id);\n        const newIndex = items.findIndex((item) => item.id === over.id);\n\n        // Check if the dragged item is being dropped on an adjacent item\n        if (Math.abs(oldIndex - newIndex) === 1) {\n          // Merge the messages\n          const mergedMessage = {\n            id: Date.now().toString(),\n            text: `${items[oldIndex].text} ${items[newIndex].text}`,\n            sender: items[oldIndex].sender, // You might want to adjust this logic\n          };\n\n          // Remove the two original messages and insert the merged one\n          const newItems = [...items];\n          newItems.splice(Math.min(oldIndex, newIndex), 2, mergedMessage);\n          return newItems;\n        }\n\n        // If not merging, just reorder\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCenter}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext\n          items={messages}\n          strategy={verticalListSortingStrategy}\n        >\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableItem key={message.id} id={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}