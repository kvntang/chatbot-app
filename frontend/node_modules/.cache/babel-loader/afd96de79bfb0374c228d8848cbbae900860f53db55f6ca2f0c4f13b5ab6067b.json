{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(SortableMessageBubble, \"InVr0b5Mi061/rJry+Zf96inIeQ=\", false, function () {\n  return [useSortable];\n});\n_c = SortableMessageBubble;\nconst ChatBox = () => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    const mergeStartThreshold = 0.5;\n    const mergeEndThreshold = 1.0;\n    const mergeStartPosition = over.rect.top + over.rect.height * mergeStartThreshold;\n    const mergeEndPosition = over.rect.top + over.rect.height * mergeEndThreshold;\n    const activePosTop = active.rect.current.translated.top;\n    const isInMergeZone = activePosTop > mergeStartPosition || activePosTop < mergeEndPosition;\n    let reorderedMessages;\n    if (isInMergeZone) {\n      // Merge messages\n      const activeMessage = messages[activeIndex];\n      const overMessage = messages[overIndex];\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}`,\n        isMerged: true // Add this line\n      };\n      console.log(`merged is true for ${mergedMessage.text}`);\n      reorderedMessages = messages.filter(msg => msg.id !== active.id).map(msg => {\n        if (msg.id === over.id) {\n          return mergedMessage;\n        }\n        return msg;\n      });\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n    }\n\n    // Update message order\n    reorderedMessages = reorderedMessages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n    setMessages(reorderedMessages);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c2 = ChatBox;\nexport default ChatBox;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableMessageBubble\");\n$RefreshReg$(_c2, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","SortableContext","arrayMove","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","SortableMessageBubble","message","_s","attributes","listeners","setNodeRef","transform","transition","isDragging","isOver","id","style","Transform","toString","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","ChatBox","_s2","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","text","sender","prevMessages","order","length","setTimeout","botReply","handleDragEnd","event","active","over","activeIndex","findIndex","msg","overIndex","mergeStartThreshold","mergeEndThreshold","mergeStartPosition","rect","top","height","mergeEndPosition","activePosTop","current","translated","isInMergeZone","reorderedMessages","activeMessage","overMessage","mergedMessage","isMerged","console","log","filter","map","index","className","collisionDetection","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\n\n\nconst SortableMessageBubble = ({ message }) => {\n    const { \n        attributes, \n        listeners, \n        setNodeRef, \n        transform, \n        transition,\n        isDragging,\n        isOver,\n    } = useSortable({ id: message.id });\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n  \n    return ( //return the message bubble in a div with the style and attributes of the message bubble\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\n      </div>\n    );\n  };\n  \n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  \n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    const mergeStartThreshold = 0.5;\n    const mergeEndThreshold = 1.0;\n    \n    const mergeStartPosition = over.rect.top + over.rect.height * mergeStartThreshold;\n    const mergeEndPosition = over.rect.top + over.rect.height * mergeEndThreshold;\n    const activePosTop = active.rect.current.translated.top;\n\n    const isInMergeZone = activePosTop > mergeStartPosition || activePosTop < mergeEndPosition;\n\n    let reorderedMessages;\n\n    if (isInMergeZone) {\n      // Merge messages\n      const activeMessage = messages[activeIndex];\n      const overMessage = messages[overIndex];\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}`,\n        isMerged: true, // Add this line\n      };\n      console.log(`merged is true for ${mergedMessage.text}`);\n\n      reorderedMessages = messages.filter((msg) => msg.id !== active.id).map((msg) => {\n        if (msg.id === over.id) {\n          return mergedMessage;\n        }\n        return msg;\n      });\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n    }\n\n    // Update message order\n    reorderedMessages = reorderedMessages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n\n    setMessages(reorderedMessages);\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={rectIntersection} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}