{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }));\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) return;\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    if (activeIndex !== overIndex) {\n      setMessages(prevMessages => {\n        const newMessages = [...prevMessages];\n        const [removed] = newMessages.splice(activeIndex, 1);\n        newMessages.splice(overIndex, 0, removed);\n        return newMessages.map((msg, index) => ({\n          ...msg,\n          order: index + 1\n        }));\n      });\n    }\n  };\n  const handleDragOver = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) return;\n    const activeMessage = messages.find(msg => msg.id === active.id);\n    const overMessage = messages.find(msg => msg.id === over.id);\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    const {\n      top,\n      bottom\n    } = over.rect;\n    const overMiddleY = top + (bottom - top) / 2;\n    if (event.clientY < overMiddleY && activeIndex > overIndex) {\n      // Merge messages when dropping on upper half\n      setMessages(prevMessages => {\n        const mergedMessage = {\n          ...overMessage,\n          text: `${overMessage.text} ${activeMessage.text}`\n        };\n        return prevMessages.filter(msg => msg.id !== active.id).map(msg => msg.id === over.id ? mergedMessage : msg).map((msg, index) => ({\n          ...msg,\n          order: index + 1\n        }));\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    onDragEnd: handleDragEnd,\n    onDragOver: handleDragOver,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(DraggableMessage, {\n          message: message,\n          index: index\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleInputChange,\n          placeholder: \"Type your message...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"yVcyl0SfR2iYBvhM5Ml7hciuWD4=\", false, function () {\n  return [useSensors, useSensor];\n});\n_c = ChatBox;\nconst DraggableMessage = ({\n  message,\n  index\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef: setDragRef,\n    transform\n  } = useDraggable({\n    id: message.id\n  });\n  const {\n    setNodeRef: setDropRef,\n    isOver\n  } = useDroppable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Translate.toString(transform),\n    opacity: transform ? 0.5 : 1,\n    cursor: 'move',\n    borderTop: isOver ? '2px solid blue' : 'none',\n    borderBottom: isOver ? '2px solid green' : 'none'\n  };\n  const ref = node => {\n    setDragRef(node);\n    setDropRef(node);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s2(DraggableMessage, \"EFcDzDSXsqQmHnY7F3S4HV6Arkg=\", false, function () {\n  return [useDraggable, useDroppable];\n});\n_c2 = DraggableMessage;\nexport default ChatBox;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"DraggableMessage\");","map":{"version":3,"names":["React","useState","useRef","DndContext","useSensor","useSensors","PointerSensor","useDraggable","useDroppable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","sensors","activationConstraint","distance","handleDragEnd","event","active","over","activeIndex","findIndex","msg","overIndex","newMessages","removed","splice","map","index","handleDragOver","activeMessage","find","overMessage","top","bottom","rect","overMiddleY","clientY","mergedMessage","filter","onDragEnd","onDragOver","children","className","message","DraggableMessage","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","setDragRef","transform","setDropRef","isOver","style","Translate","opacity","cursor","borderTop","borderBottom","ref","node","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { DndContext, useSensor, useSensors, PointerSensor, useDraggable, useDroppable } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    })\n  );\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    if (!over || active.id === over.id) return;\n\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    if (activeIndex !== overIndex) {\n      setMessages((prevMessages) => {\n        const newMessages = [...prevMessages];\n        const [removed] = newMessages.splice(activeIndex, 1);\n        newMessages.splice(overIndex, 0, removed);\n        return newMessages.map((msg, index) => ({ ...msg, order: index + 1 }));\n      });\n    }\n  };\n\n  const handleDragOver = (event) => {\n    const { active, over } = event;\n    if (!over || active.id === over.id) return;\n\n    const activeMessage = messages.find((msg) => msg.id === active.id);\n    const overMessage = messages.find((msg) => msg.id === over.id);\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    const { top, bottom } = over.rect;\n    const overMiddleY = top + (bottom - top) / 2;\n\n    if (event.clientY < overMiddleY && activeIndex > overIndex) {\n      // Merge messages when dropping on upper half\n      setMessages((prevMessages) => {\n        const mergedMessage = {\n          ...overMessage,\n          text: `${overMessage.text} ${activeMessage.text}`,\n        };\n        return prevMessages\n          .filter((msg) => msg.id !== active.id)\n          .map((msg) => (msg.id === over.id ? mergedMessage : msg))\n          .map((msg, index) => ({ ...msg, order: index + 1 }));\n      });\n    }\n  };\n\n  return (\n    <DndContext \n      sensors={sensors}\n      onDragEnd={handleDragEnd}\n      onDragOver={handleDragOver}\n    >\n      <div className=\"chat-box\">\n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <DraggableMessage\n              key={message.id}\n              message={message}\n              index={index}\n            />\n          ))}\n        </div>\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n            placeholder=\"Type your message...\"\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n          />\n          <button onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n    </DndContext>\n  );\n};\n\nconst DraggableMessage = ({ message, index }) => {\n  const { attributes, listeners, setNodeRef: setDragRef, transform } = useDraggable({\n    id: message.id,\n  });\n  const { setNodeRef: setDropRef, isOver } = useDroppable({\n    id: message.id,\n  });\n\n  const style = {\n    transform: CSS.Translate.toString(transform),\n    opacity: transform ? 0.5 : 1,\n    cursor: 'move',\n    borderTop: isOver ? '2px solid blue' : 'none',\n    borderBottom: isOver ? '2px solid green' : 'none',\n  };\n\n  const ref = (node) => {\n    setDragRef(node);\n    setDropRef(node);\n  };\n\n  return (\n    <div ref={ref} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}