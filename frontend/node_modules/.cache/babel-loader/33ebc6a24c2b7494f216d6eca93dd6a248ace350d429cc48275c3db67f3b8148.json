{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app-2/frontend/src/components/kevin_gpt2_debug.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { DndContext, DragOverlay, rectIntersection, useDroppable } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  if (!message) {\n    return null;\n  }\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n// Define a trash can droppable area\n_c = MessageBubble;\nfunction TrashCan() {\n  _s();\n  const {\n    setNodeRef\n  } = useDroppable({\n    id: 'trash-drop'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"trash-drop\",\n    ref: setNodeRef,\n    className: \"trash-can\",\n    children: \"\\uD83D\\uDDD1\\uFE0F Trash\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(TrashCan, \"cRxoCnej0Qm2GWGzi2a2LoWImLI=\", false, function () {\n  return [useDroppable];\n});\n_c2 = TrashCan;\nconst SortableMessageBubble = ({\n  message,\n  activeId\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = useMemo(() => ({\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: message.id === activeId ? 0 : 1 // Hide the item if it's being dragged\n  }), [transform, transition, activeId, message.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message,\n      isDragging: message.id === activeId,\n      isOver: isOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"b72tyonQU2GWK3hTGQjo0WraER0=\", false, function () {\n  return [useSortable];\n});\n_c3 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s3();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // State for tracking the active draggable item\n  const [activeId, setActiveId] = useState(null);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    const fetchGenericBotResponse = async (messages, inputValue) => {\n      const messageHistory = [...messages.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      })), {\n        role: 'user',\n        content: inputValue\n      }];\n      try {\n        const response = await axios.post('http://localhost:3001/api/generic_bot', {\n          messageHistory\n        });\n        return {\n          id: (Date.now() + 1).toString(),\n          text: response.data.reply,\n          sender: 'bot'\n        };\n      } catch (error) {\n        console.error('Error fetching reply from the backend:', error);\n        return null;\n      }\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n    const genericBotReply = await fetchGenericBotResponse(messages, inputValue);\n    if (genericBotReply) {\n      setMessages(prevMessages => [...prevMessages, {\n        ...genericBotReply,\n        order: prevMessages.length + 1\n      }]);\n    }\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n\n  // Helper function to get the opposite sender\n  const getOppositeSender = sender => {\n    return sender === 'user' ? 'bot' : 'user';\n  };\n\n  // Function to merge messages via API\n  const mergeMessagesViaAPI = async (message1, message2) => {\n    const messageHistory = [{\n      role: 'user',\n      content: message1\n    }, {\n      role: 'user',\n      content: message2\n    }];\n    try {\n      const response = await axios.post('http://localhost:3001/api/merge', {\n        messageHistory\n      });\n      console.log('Sent to merge API');\n      return response.data.reply;\n    } catch (error) {\n      var _error$response;\n      console.error('Error merging messages:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      return `${message1} ${message2}`;\n    }\n  };\n\n  // Updated mergeAndUpdateMessages function\n  const mergeAndUpdateMessages = async (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    if (activeIndex === -1 || overIndex === -1) return messages;\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n\n    // Get merged text via API\n    const mergedText = await mergeMessagesViaAPI(overMessage.text, activeMessage.text);\n    const mergedMessage = {\n      ...overMessage,\n      text: mergedText,\n      isMerged: true\n    };\n\n    // Keep messages before the merged message\n    const messagesBeforeMerged = messages.slice(0, Math.min(activeIndex, overIndex));\n\n    // Determine how many new messages to generate THIS MIGHT NEED TO CHANGE!!!\n    const messagesToGenerateCount = messages.length - messagesBeforeMerged.length - 2;\n\n    // Generate new messages\n    const startingSender = getOppositeSender(mergedMessage.sender);\n    const newReplies = [];\n    for (let i = 0; i < messagesToGenerateCount; i++) {\n      const sender = i % 2 === 0 ? startingSender : getOppositeSender(startingSender);\n      const newMessage = {\n        id: (Date.now() + i).toString(),\n        text: `new message ${i + 1}`,\n        sender\n      };\n      newReplies.push(newMessage);\n    }\n\n    // Assemble the updated messages\n    const updatedMessages = [...messagesBeforeMerged, mergedMessage, ...newReplies];\n    return updatedMessages;\n  };\n\n  // Drag event handlers\n  const handleDragStart = event => {\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n  };\n  const handleDragEnd = async event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (!over || active.id === over.id) {\n      return;\n    }\n    console.log('Dropped over:', over.id);\n    let reorderedMessages;\n\n    // If dropped over the trash can\n    if (over.id === 'trash-drop') {\n      reorderedMessages = messages.filter(msg => msg.id !== active.id);\n      setMessages(updateMessageOrder(reorderedMessages));\n      return;\n    }\n    // If dropped over another message, merge them\n    else {\n      const activeIndex = messages.findIndex(msg => msg.id === active.id);\n      const overIndex = messages.findIndex(msg => msg.id === over.id);\n      const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n      if (isOverThreshold) {\n        // Merge messages\n        reorderedMessages = await mergeAndUpdateMessages(messages, active.id, over.id);\n      } else {\n        // Simple reorder\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      }\n      setMessages(updateMessageOrder(reorderedMessages));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages.map(message => message.id),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            activeId: activeId\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)), activeId && /*#__PURE__*/_jsxDEV(TrashCan, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId ? messages.find(message => message.id === activeId) ? /*#__PURE__*/_jsxDEV(MessageBubble, {\n          message: messages.find(message => message.id === activeId),\n          isDragging: true,\n          isOver: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this) : null : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s3(ChatBox, \"U2IWqxHaAvLBVaMSnAE6GmDpNII=\");\n_c4 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"TrashCan\");\n$RefreshReg$(_c3, \"SortableMessageBubble\");\n$RefreshReg$(_c4, \"ChatBox\");","map":{"version":3,"names":["React","useState","useMemo","DndContext","DragOverlay","rectIntersection","useDroppable","SortableContext","arrayMove","useSortable","CSS","axios","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","TrashCan","_s","setNodeRef","id","ref","_c2","SortableMessageBubble","activeId","_s2","attributes","listeners","transform","transition","style","Transform","toString","opacity","_c3","ChatBox","_s3","messages","setMessages","inputValue","setInputValue","setActiveId","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","fetchGenericBotResponse","messageHistory","map","msg","role","content","response","post","data","reply","error","console","prevMessages","order","length","genericBotReply","updateMessageOrder","index","getOppositeSender","mergeMessagesViaAPI","message1","message2","log","_error$response","mergeAndUpdateMessages","overId","activeIndex","findIndex","overIndex","activeMessage","overMessage","mergedText","mergedMessage","messagesBeforeMerged","slice","Math","min","messagesToGenerateCount","startingSender","newReplies","i","push","updatedMessages","handleDragStart","event","active","handleDragEnd","over","reorderedMessages","filter","isOverThreshold","rect","top","height","current","translated","collisionDetection","onDragStart","onDragEnd","items","find","type","onChange","placeholder","onKeyPress","key","onClick","_c4","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app-2/frontend/src/components/kevin_gpt2_debug.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport {\n  DndContext,\n  DragOverlay,\n  rectIntersection,\n  useDroppable,\n} from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport axios from 'axios';\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n  if (!message) {\n    return null;\n  }\n\n  let bubbleClass =\n    message.sender === 'user'\n      ? 'user-message'\n      : message.sender === 'bot'\n      ? 'bot-message'\n      : 'merged-message';\n\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n\n  return (\n    <div\n      className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}\n    >\n      {message.text}\n    </div>\n  );\n};\n\n// Define a trash can droppable area\nfunction TrashCan() {\n  const { setNodeRef } = useDroppable({\n    id: 'trash-drop',\n  });\n\n  return (\n    <div id=\"trash-drop\" ref={setNodeRef} className=\"trash-can\">\n      🗑️ Trash\n    </div>\n  );\n}\n\nconst SortableMessageBubble = ({ message, activeId }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isOver,\n  } = useSortable({ id: message.id });\n\n  const style = useMemo(\n    () => ({\n      transform: CSS.Transform.toString(transform),\n      transition,\n      opacity: message.id === activeId ? 0 : 1, // Hide the item if it's being dragged\n    }),\n    [transform, transition, activeId, message.id]\n  );\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble\n        message={message}\n        isDragging={message.id === activeId}\n        isOver={isOver}\n      />\n    </div>\n  );\n};\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // State for tracking the active draggable item\n  const [activeId, setActiveId] = useState(null);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    const fetchGenericBotResponse = async (messages, inputValue) => {\n      const messageHistory = [\n        ...messages.map((msg) => ({\n          role: msg.sender === 'user' ? 'user' : 'assistant',\n          content: msg.text,\n        })),\n        { role: 'user', content: inputValue },\n      ];\n\n      try {\n        const response = await axios.post(\n          'http://localhost:3001/api/generic_bot',\n          {\n            messageHistory,\n          }\n        );\n\n        return {\n          id: (Date.now() + 1).toString(),\n          text: response.data.reply,\n          sender: 'bot',\n        };\n      } catch (error) {\n        console.error('Error fetching reply from the backend:', error);\n        return null;\n      }\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n\n    setInputValue('');\n\n    const genericBotReply = await fetchGenericBotResponse(messages, inputValue);\n\n    if (genericBotReply) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...genericBotReply, order: prevMessages.length + 1 },\n      ]);\n    }\n  };\n\n  const updateMessageOrder = (messages) => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n  };\n\n  // Helper function to get the opposite sender\n  const getOppositeSender = (sender) => {\n    return sender === 'user' ? 'bot' : 'user';\n  };\n\n  // Function to merge messages via API\n  const mergeMessagesViaAPI = async (message1, message2) => {\n    const messageHistory = [\n      { role: 'user', content: message1 },\n      { role: 'user', content: message2 },\n    ];\n\n    try {\n      const response = await axios.post('http://localhost:3001/api/merge', {\n        messageHistory,\n      });\n      console.log('Sent to merge API');\n\n      return response.data.reply;\n    } catch (error) {\n      console.error(\n        'Error merging messages:',\n        error.response?.data || error.message\n      );\n      return `${message1} ${message2}`;\n    }\n  };\n\n  // Updated mergeAndUpdateMessages function\n  const mergeAndUpdateMessages = async (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex((msg) => msg.id === activeId);\n    const overIndex = messages.findIndex((msg) => msg.id === overId);\n\n    if (activeIndex === -1 || overIndex === -1) return messages;\n\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n\n    // Get merged text via API\n    const mergedText = await mergeMessagesViaAPI(\n      overMessage.text,\n      activeMessage.text\n    );\n\n    const mergedMessage = {\n      ...overMessage,\n      text: mergedText,\n      isMerged: true,\n    };\n\n    // Keep messages before the merged message\n    const messagesBeforeMerged = messages.slice(0, Math.min(activeIndex, overIndex));\n\n    // Determine how many new messages to generate THIS MIGHT NEED TO CHANGE!!!\n    const messagesToGenerateCount = messages.length - messagesBeforeMerged.length - 2;\n\n    // Generate new messages\n    const startingSender = getOppositeSender(mergedMessage.sender);\n    const newReplies = [];\n    for (let i = 0; i < messagesToGenerateCount; i++) {\n      const sender = i % 2 === 0 ? startingSender : getOppositeSender(startingSender);\n      const newMessage = {\n        id: (Date.now() + i).toString(),\n        text: `new message ${i + 1}`,\n        sender,\n      };\n      newReplies.push(newMessage);\n    }\n\n    // Assemble the updated messages\n    const updatedMessages = [...messagesBeforeMerged, mergedMessage, ...newReplies];\n\n    return updatedMessages;\n  };\n\n  // Drag event handlers\n  const handleDragStart = (event) => {\n    const { active } = event;\n    setActiveId(active.id);\n  };\n\n  const handleDragEnd = async (event) => {\n    const { active, over } = event;\n\n    setActiveId(null);\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    console.log('Dropped over:', over.id);\n\n    let reorderedMessages;\n\n    // If dropped over the trash can\n    if (over.id === 'trash-drop') {\n      reorderedMessages = messages.filter((msg) => msg.id !== active.id);\n      setMessages(updateMessageOrder(reorderedMessages));\n      return;\n    }\n    // If dropped over another message, merge them\n    else {\n      const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n      const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n      const isOverThreshold =\n        over.rect.top + over.rect.height * 0.7 >\n        active.rect.current.translated.top;\n\n      if (isOverThreshold) {\n        // Merge messages\n        reorderedMessages = await mergeAndUpdateMessages(\n          messages,\n          active.id,\n          over.id\n        );\n      } else {\n        // Simple reorder\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      }\n\n      setMessages(updateMessageOrder(reorderedMessages));\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext\n        collisionDetection={rectIntersection}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={messages.map((message) => message.id)}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble\n                key={message.id}\n                message={message}\n                activeId={activeId}\n              />\n            ))}\n\n            {/* Render trash can if something is being dragged */}\n            {activeId && <TrashCan />}\n          </div>\n        </SortableContext>\n        <DragOverlay>\n          {activeId ? (\n            messages.find((message) => message.id === activeId) ? (\n              <MessageBubble\n                message={messages.find(\n                  (message) => message.id === activeId\n                )}\n                isDragging={true}\n                isOver={false}\n              />\n            ) : null\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}