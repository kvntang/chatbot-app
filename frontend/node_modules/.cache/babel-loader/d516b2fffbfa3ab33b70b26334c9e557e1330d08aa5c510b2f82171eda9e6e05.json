{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isOverTarget, setIsOverTarget] = useState(null);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDragEnd = event => {\n    _s();\n    const {\n      active,\n      over\n    } = event;\n    console.log('Active:', active); //for debugging\n    console.log('Over:', over);\n\n    // If active and over are the same, no need to merge\n    if (!over || active.id === over.id) {\n      console.log('No merge needed'); //for debugging\n      return;\n    }\n    const activeMessage = messages.find(msg => msg.id === active.id);\n    const overMessage = messages.find(msg => msg.id === over.id);\n\n    // Check if the mouse is over the target message\n    const [isOverTarget, setIsOverTarget] = useState(false);\n    useEffect(() => {\n      if (over && active) {\n        setIsOverTarget(active.rect.current.translated.top <= over.rect.top);\n      } else {\n        setIsOverTarget(false);\n      }\n    }, [over, active]);\n    let reorderedMessages;\n    if (isOverTarget) {\n      // Merge messages\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}` // Concatenate the text\n      };\n      console.log('Merged Message:', mergedMessage); //for debugging\n      console.log('Merging at location:', overMessage.order); // Print the order of the target message\n\n      // Remove the active (dragged) message and replace the over (target) message with the merged one\n      const updatedMessages = messages.filter(msg => msg.id !== active.id).map(msg => {\n        if (msg.id === over.id) {\n          return mergedMessage; // Replace the target message with the merged one\n        }\n        return msg; // Keep other messages unchanged\n      });\n\n      // Update message order\n      reorderedMessages = updatedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n    } else {\n      // Simple reorder\n      const oldIndex = messages.findIndex(msg => msg.id === active.id);\n      const newIndex = messages.findIndex(msg => msg.id === over.id);\n      reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n    }\n    console.log('Reordered messages:', reorderedMessages.map(msg => ({\n      order: msg.order,\n      text: msg.text\n    }))); //for debugging\n    setMessages(reorderedMessages);\n  };\n  _s(handleDragEnd, \"4gp72MqShVMLKvSEU+Gt4oSGct8=\");\n  const handleDragOver = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && active.id !== over.id) {\n      setIsOverTarget(over.id);\n    } else {\n      setIsOverTarget(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      onDragOver: handleDragOver,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            isOverTarget: isOverTarget === message.id\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatBox, \"xtpbJzH3bnKj/JJ3qgsD8+1fqPo=\");\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message,\n  isOverTarget\n}) => {\n  _s3();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    backgroundColor: isOverTarget ? 'lightblue' : 'transparent'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s3(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","closestCenter","SortableContext","arrayMove","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s2","_s","$RefreshSig$","messages","setMessages","inputValue","setInputValue","isOverTarget","setIsOverTarget","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","handleDragEnd","event","active","over","console","log","activeMessage","find","msg","overMessage","rect","current","translated","top","reorderedMessages","mergedMessage","updatedMessages","filter","map","index","oldIndex","findIndex","newIndex","handleDragOver","className","children","collisionDetection","onDragEnd","onDragOver","items","message","SortableMessageBubble","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s3","attributes","listeners","setNodeRef","transform","transition","style","Transform","backgroundColor","ref","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isOverTarget, setIsOverTarget] = useState(null);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    console.log('Active:', active); //for debugging\n    console.log('Over:', over);\n\n    // If active and over are the same, no need to merge\n    if (!over || active.id === over.id) {\n      console.log('No merge needed'); //for debugging\n      return;\n    }\n\n    const activeMessage = messages.find((msg) => msg.id === active.id);\n    const overMessage = messages.find((msg) => msg.id === over.id);\n\n    // Check if the mouse is over the target message\n    const [isOverTarget, setIsOverTarget] = useState(false);\n    useEffect(() => {\n      if (over && active) {\n        setIsOverTarget(active.rect.current.translated.top <= over.rect.top);\n      } else {\n        setIsOverTarget(false);\n      }\n    }, [over, active]);\n\n    let reorderedMessages;\n\n    if (isOverTarget) {\n      // Merge messages\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}`, // Concatenate the text\n      };\n      console.log('Merged Message:', mergedMessage); //for debugging\n      console.log('Merging at location:', overMessage.order); // Print the order of the target message\n\n      // Remove the active (dragged) message and replace the over (target) message with the merged one\n      const updatedMessages = messages.filter((msg) => msg.id !== active.id).map((msg) => {\n        if (msg.id === over.id) {\n          return mergedMessage; // Replace the target message with the merged one\n        }\n        return msg; // Keep other messages unchanged\n      });\n\n      // Update message order\n      reorderedMessages = updatedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n    } else {\n      // Simple reorder\n      const oldIndex = messages.findIndex((msg) => msg.id === active.id);\n      const newIndex = messages.findIndex((msg) => msg.id === over.id);\n      reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n    }\n\n    console.log('Reordered messages:', reorderedMessages.map(msg => ({ order: msg.order, text: msg.text }))); //for debugging\n    setMessages(reorderedMessages);\n  };\n\n  const handleDragOver = (event) => {\n    const { active, over } = event;\n    if (over && active.id !== over.id) {\n      setIsOverTarget(over.id);\n    } else {\n      setIsOverTarget(null);\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext \n        collisionDetection={closestCenter} \n        onDragEnd={handleDragEnd}\n        onDragOver={handleDragOver}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble \n                key={message.id} \n                message={message} \n                isOverTarget={isOverTarget === message.id}\n              />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message, isOverTarget }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    backgroundColor: isOverTarget ? 'lightblue' : 'transparent',\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}