{"ast":null,"code":"var _jsxFileName = \"/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox_3.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter, rectIntersection } from '@dnd-kit/core'; // rectIntersection from @dnd-kit/core\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isDragging, setIsDragging] = useState(false);\n\n  // List of random bot replies\n  const botReplies = [\"I see. That's interesting.\", \"Can you tell me more about that?\", \"Okay, got it!\"];\n\n  // Initialize the chat with a bot message when the component mounts\n  useEffect(() => {\n    const initialMessage = {\n      id: Date.now().toString(),\n      text: 'Hello, how can I help you today?',\n      sender: 'bot',\n      order: 1\n    };\n    setMessages([initialMessage]);\n  }, []);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newUserMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n      order: messages.length + 1\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newUserMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response with a random reply\n    setTimeout(() => {\n      const randomReply = botReplies[Math.floor(Math.random() * botReplies.length)];\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: randomReply,\n        sender: 'bot',\n        order: messages.length + 2\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDelete = id => {\n    // Remove the message by filtering it out\n    setMessages(prevMessages => prevMessages.filter(msg => msg.id !== id));\n  };\n  const handleMerge = (draggedId, overId) => {\n    // Find the dragged message and the message it was dropped over\n    const draggedMessage = messages.find(msg => msg.id === draggedId);\n    const overMessage = messages.find(msg => msg.id === overId);\n\n    // Merge the text content\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${draggedMessage.text}` // Combine texts\n    };\n\n    // Update messages: remove draggedMessage, update overMessage with merged text\n    setMessages(prevMessages => prevMessages.filter(msg => msg.id !== draggedId) // Remove dragged message\n    .map(msg => msg.id === overId ? mergedMessage : msg) // Replace overMessage with merged message\n    );\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    setIsDragging(false); // Stop showing the trashcan\n\n    if (!over) return;\n\n    // If dropped on trash, delete the message\n    if (over.id === 'trashcan') {\n      handleDelete(active.id);\n      return;\n    }\n\n    // If dropped over another message, merge them\n    if (active.id !== over.id) {\n      handleMerge(active.id, over.id); // Merge messages if dropped on another\n    }\n  };\n  const handleDragStart = () => {\n    setIsDragging(true); // Show trashcan when dragging\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection // Use rectIntersection from core\n      ,\n      onDragEnd: handleDragEnd,\n      onDragStart: handleDragStart,\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), isDragging && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"trashcan\",\n        className: \"trashcan\",\n        children: \"\\uD83D\\uDDD1\\uFE0F Drag here to delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"B6Kmq0T07kC0aiiy7tO+6FFmdbY=\");\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    className: \"message-bubble\",\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","closestCenter","rectIntersection","arrayMove","SortableContext","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","isDragging","setIsDragging","botReplies","initialMessage","id","Date","now","toString","text","sender","order","handleInputChange","e","target","value","handleSendMessage","trim","newUserMessage","length","prevMessages","setTimeout","randomReply","Math","floor","random","botReply","handleDelete","filter","msg","handleMerge","draggedId","overId","draggedMessage","find","overMessage","mergedMessage","map","handleDragEnd","event","active","over","handleDragStart","className","children","collisionDetection","onDragEnd","onDragStart","items","message","SortableMessageBubble","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","style","Transform","ref","_c2","$RefreshReg$"],"sources":["/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox_3.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter, rectIntersection } from '@dnd-kit/core'; // rectIntersection from @dnd-kit/core\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isDragging, setIsDragging] = useState(false);\n\n  // List of random bot replies\n  const botReplies = [\n    \"I see. That's interesting.\",\n    \"Can you tell me more about that?\",\n    \"Okay, got it!\"\n  ];\n\n  // Initialize the chat with a bot message when the component mounts\n  useEffect(() => {\n    const initialMessage = {\n      id: Date.now().toString(),\n      text: 'Hello, how can I help you today?',\n      sender: 'bot',\n      order: 1,\n    };\n    setMessages([initialMessage]);\n  }, []);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newUserMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n      order: messages.length + 1,\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newUserMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response with a random reply\n    setTimeout(() => {\n      const randomReply = botReplies[Math.floor(Math.random() * botReplies.length)];\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: randomReply,\n        sender: 'bot',\n        order: messages.length + 2,\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDelete = (id) => {\n    // Remove the message by filtering it out\n    setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== id));\n  };\n\n  const handleMerge = (draggedId, overId) => {\n    // Find the dragged message and the message it was dropped over\n    const draggedMessage = messages.find((msg) => msg.id === draggedId);\n    const overMessage = messages.find((msg) => msg.id === overId);\n\n    // Merge the text content\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${draggedMessage.text}`, // Combine texts\n    };\n\n    // Update messages: remove draggedMessage, update overMessage with merged text\n    setMessages((prevMessages) =>\n      prevMessages\n        .filter((msg) => msg.id !== draggedId) // Remove dragged message\n        .map((msg) => (msg.id === overId ? mergedMessage : msg)) // Replace overMessage with merged message\n    );\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    setIsDragging(false); // Stop showing the trashcan\n\n    if (!over) return;\n\n    // If dropped on trash, delete the message\n    if (over.id === 'trashcan') {\n      handleDelete(active.id);\n      return;\n    }\n\n    // If dropped over another message, merge them\n    if (active.id !== over.id) {\n      handleMerge(active.id, over.id); // Merge messages if dropped on another\n    }\n  };\n\n  const handleDragStart = () => {\n    setIsDragging(true); // Show trashcan when dragging\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext\n        collisionDetection={rectIntersection} // Use rectIntersection from core\n        onDragEnd={handleDragEnd}\n        onDragStart={handleDragStart}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble\n                key={message.id}\n                message={message}\n              />\n            ))}\n          </div>\n        </SortableContext>\n        {/* Trashcan Icon, shown only when dragging */}\n        {isDragging && (\n          <div id=\"trashcan\" className=\"trashcan\">\n            🗑️ Drag here to delete\n          </div>\n        )}\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners} className=\"message-bubble\">\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,eAAe,CAAC,CAAC;AAC7E,SAASC,SAAS,EAAEC,eAAe,QAAQ,mBAAmB;AAC9D,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,GAAG,QAAQ,oBAAoB;AACxC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMoB,UAAU,GAAG,CACjB,4BAA4B,EAC5B,kCAAkC,EAClC,eAAe,CAChB;;EAED;EACAnB,SAAS,CAAC,MAAM;IACd,MAAMoB,cAAc,GAAG;MACrBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAE,kCAAkC;MACxCC,MAAM,EAAE,KAAK;MACbC,KAAK,EAAE;IACT,CAAC;IACDb,WAAW,CAAC,CAACM,cAAc,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,iBAAiB,GAAIC,CAAC,IAAK;IAC/Bb,aAAa,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIjB,UAAU,CAACkB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAE9B,MAAMC,cAAc,GAAG;MACrBb,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAEV,UAAU;MAChBW,MAAM,EAAE,MAAM;MACdC,KAAK,EAAEd,QAAQ,CAACsB,MAAM,GAAG;IAC3B,CAAC;IAEDrB,WAAW,CAAEsB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAE,GAAGF,cAAc;MAAEP,KAAK,EAAES,YAAY,CAACD,MAAM,GAAG;IAAE,CAAC,CACtD,CAAC;IACFnB,aAAa,CAAC,EAAE,CAAC;;IAEjB;IACAqB,UAAU,CAAC,MAAM;MACf,MAAMC,WAAW,GAAGnB,UAAU,CAACoB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtB,UAAU,CAACgB,MAAM,CAAC,CAAC;MAC7E,MAAMO,QAAQ,GAAG;QACfrB,EAAE,EAAE,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;QAC/BC,IAAI,EAAEa,WAAW;QACjBZ,MAAM,EAAE,KAAK;QACbC,KAAK,EAAEd,QAAQ,CAACsB,MAAM,GAAG;MAC3B,CAAC;MACDrB,WAAW,CAAEsB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAE,GAAGM,QAAQ;QAAEf,KAAK,EAAES,YAAY,CAACD,MAAM,GAAG;MAAE,CAAC,CAChD,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMQ,YAAY,GAAItB,EAAE,IAAK;IAC3B;IACAP,WAAW,CAAEsB,YAAY,IAAKA,YAAY,CAACQ,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC5E,CAAC;EAED,MAAMyB,WAAW,GAAGA,CAACC,SAAS,EAAEC,MAAM,KAAK;IACzC;IACA,MAAMC,cAAc,GAAGpC,QAAQ,CAACqC,IAAI,CAAEL,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAK0B,SAAS,CAAC;IACnE,MAAMI,WAAW,GAAGtC,QAAQ,CAACqC,IAAI,CAAEL,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAK2B,MAAM,CAAC;;IAE7D;IACA,MAAMI,aAAa,GAAG;MACpB,GAAGD,WAAW;MACd1B,IAAI,EAAE,GAAG0B,WAAW,CAAC1B,IAAI,IAAIwB,cAAc,CAACxB,IAAI,EAAE,CAAE;IACtD,CAAC;;IAED;IACAX,WAAW,CAAEsB,YAAY,IACvBA,YAAY,CACTQ,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAK0B,SAAS,CAAC,CAAC;IAAA,CACtCM,GAAG,CAAER,GAAG,IAAMA,GAAG,CAACxB,EAAE,KAAK2B,MAAM,GAAGI,aAAa,GAAGP,GAAI,CAAC,CAAC;IAC7D,CAAC;EACH,CAAC;EAED,MAAMS,aAAa,GAAIC,KAAK,IAAK;IAC/B,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAGF,KAAK;IAE9BrC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;;IAEtB,IAAI,CAACuC,IAAI,EAAE;;IAEX;IACA,IAAIA,IAAI,CAACpC,EAAE,KAAK,UAAU,EAAE;MAC1BsB,YAAY,CAACa,MAAM,CAACnC,EAAE,CAAC;MACvB;IACF;;IAEA;IACA,IAAImC,MAAM,CAACnC,EAAE,KAAKoC,IAAI,CAACpC,EAAE,EAAE;MACzByB,WAAW,CAACU,MAAM,CAACnC,EAAE,EAAEoC,IAAI,CAACpC,EAAE,CAAC,CAAC,CAAC;IACnC;EACF,CAAC;EAED,MAAMqC,eAAe,GAAGA,CAAA,KAAM;IAC5BxC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,oBACER,OAAA;IAAKiD,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBlD,OAAA,CAACT,UAAU;MACT4D,kBAAkB,EAAE1D,gBAAiB,CAAC;MAAA;MACtC2D,SAAS,EAAER,aAAc;MACzBS,WAAW,EAAEL,eAAgB;MAAAE,QAAA,gBAE7BlD,OAAA,CAACL,eAAe;QAAC2D,KAAK,EAAEnD,QAAS;QAAA+C,QAAA,eAC/BlD,OAAA;UAAKiD,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAChC/C,QAAQ,CAACwC,GAAG,CAAEY,OAAO,iBACpBvD,OAAA,CAACwD,qBAAqB;YAEpBD,OAAO,EAAEA;UAAQ,GADZA,OAAO,CAAC5C,EAAE;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEhB,CACF;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS,CAAC,EAEjBrD,UAAU,iBACTP,OAAA;QAAKW,EAAE,EAAC,UAAU;QAACsC,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAC;MAExC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC,eACb5D,OAAA;MAAKiD,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BlD,OAAA;QACE6D,IAAI,EAAC,MAAM;QACXxC,KAAK,EAAEhB,UAAW;QAClByD,QAAQ,EAAE5C,iBAAkB;QAC5B6C,WAAW,EAAC,sBAAsB;QAClCC,UAAU,EAAG7C,CAAC,IAAKA,CAAC,CAAC8C,GAAG,KAAK,OAAO,IAAI3C,iBAAiB,CAAC;MAAE;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CAAC,eACF5D,OAAA;QAAQkE,OAAO,EAAE5C,iBAAkB;QAAA4B,QAAA,EAAC;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1D,EAAA,CA9IID,OAAO;AAAAkE,EAAA,GAAPlE,OAAO;AAgJb,eAAeA,OAAO;AAEtB,MAAMuD,qBAAqB,GAAGA,CAAC;EAAED;AAAQ,CAAC,KAAK;EAAAa,GAAA;EAC7C,MAAM;IAAEC,UAAU;IAAEC,SAAS;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAG7E,WAAW,CAAC;IAAEe,EAAE,EAAE4C,OAAO,CAAC5C;EAAG,CAAC,CAAC;EAEpG,MAAM+D,KAAK,GAAG;IACZF,SAAS,EAAE3E,GAAG,CAAC8E,SAAS,CAAC7D,QAAQ,CAAC0D,SAAS,CAAC;IAC5CC;EACF,CAAC;EAED,oBACEzE,OAAA;IAAK4E,GAAG,EAAEL,UAAW;IAACG,KAAK,EAAEA,KAAM;IAAA,GAAKL,UAAU;IAAA,GAAMC,SAAS;IAAErB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC3FlD,OAAA,CAACF,aAAa;MAACyD,OAAO,EAAEA;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV,CAAC;AAACQ,GAAA,CAbIZ,qBAAqB;EAAA,QAC4C5D,WAAW;AAAA;AAAAiF,GAAA,GAD5ErB,qBAAqB;AAAA,IAAAW,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}