{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { DndContext, closestCenter, DragOverlay, useSensor, useSensors, PointerSensor } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [activeId, setActiveId] = useState(null);\n  const [dragOverInfo, setDragOverInfo] = useState(null);\n  const dragStartPositionRef = useRef(null);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }));\n  const handleDragStart = event => {\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n    dragStartPositionRef.current = event.clientY;\n  };\n  const handleDragMove = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (over && active.id !== over.id) {\n      const overMessage = messages.find(msg => msg.id === over.id);\n      const overRect = over.rect;\n      const dragDistance = event.clientY - dragStartPositionRef.current;\n      const isOverMiddle = dragDistance > overRect.height / 2;\n      setDragOverInfo({\n        overId: over.id,\n        isOverMiddle\n      });\n    } else {\n      setDragOverInfo(null);\n    }\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (!over || active.id === over.id) return;\n    const activeMessage = messages.find(msg => msg.id === active.id);\n    const overMessage = messages.find(msg => msg.id === over.id);\n    if (dragOverInfo && dragOverInfo.overId === over.id) {\n      if (dragOverInfo.isOverMiddle) {\n        // Reorder\n        const oldIndex = messages.findIndex(msg => msg.id === active.id);\n        const newIndex = messages.findIndex(msg => msg.id === over.id);\n        const reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n          ...msg,\n          order: index + 1\n        }));\n        setMessages(reorderedMessages);\n      } else {\n        // Merge\n        const mergedMessage = {\n          ...overMessage,\n          text: `${overMessage.text} ${activeMessage.text}`\n        };\n        const updatedMessages = messages.filter(msg => msg.id !== active.id).map(msg => msg.id === over.id ? mergedMessage : msg).map((msg, index) => ({\n          ...msg,\n          order: index + 1\n        }));\n        setMessages(updatedMessages);\n      }\n    }\n    setDragOverInfo(null);\n    dragStartPositionRef.current = null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragMove: handleDragMove,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            isDraggingOver: dragOverInfo && dragOverInfo.overId === message.id,\n            isOverMiddle: dragOverInfo && dragOverInfo.overId === message.id && dragOverInfo.isOverMiddle\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId ? /*#__PURE__*/_jsxDEV(MessageBubble, {\n          message: messages.find(msg => msg.id === activeId)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 23\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"1L14lP6t20ufF9P0Vxq7exD2YUg=\", false, function () {\n  return [useSensors, useSensor];\n});\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message,\n  isDraggingOver,\n  isOverMiddle\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transition: 'none',\n    // Disable transition to prevent movement\n    opacity: isDragging ? 0.5 : 1,\n    // Add visual cues for merging or reordering\n    borderTop: isDraggingOver && isOverMiddle ? '2px solid red' : 'none',\n    borderBottom: isDraggingOver && !isOverMiddle ? '2px solid green' : 'none'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"wZ9LrlAdu45h+k5IBlwhyTPFbVs=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","useRef","DndContext","closestCenter","DragOverlay","useSensor","useSensors","PointerSensor","SortableContext","arrayMove","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","activeId","setActiveId","dragOverInfo","setDragOverInfo","dragStartPositionRef","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","sensors","activationConstraint","distance","handleDragStart","event","active","current","clientY","handleDragMove","over","overMessage","find","msg","overRect","rect","dragDistance","isOverMiddle","height","overId","handleDragEnd","activeMessage","oldIndex","findIndex","newIndex","reorderedMessages","map","index","mergedMessage","updatedMessages","filter","className","children","collisionDetection","onDragStart","onDragMove","onDragEnd","items","message","SortableMessageBubble","isDraggingOver","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","isDragging","style","opacity","borderTop","borderBottom","ref","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { DndContext, closestCenter, DragOverlay, useSensor, useSensors, PointerSensor } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [activeId, setActiveId] = useState(null);\n  const [dragOverInfo, setDragOverInfo] = useState(null);\n  const dragStartPositionRef = useRef(null);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    })\n  );\n\n  const handleDragStart = (event) => {\n    const { active } = event;\n    setActiveId(active.id);\n    dragStartPositionRef.current = event.clientY;\n  };\n\n  const handleDragMove = (event) => {\n    const { active, over } = event;\n    if (over && active.id !== over.id) {\n      const overMessage = messages.find((msg) => msg.id === over.id);\n      const overRect = over.rect;\n      const dragDistance = event.clientY - dragStartPositionRef.current;\n      const isOverMiddle = dragDistance > overRect.height / 2;\n      setDragOverInfo({ overId: over.id, isOverMiddle });\n    } else {\n      setDragOverInfo(null);\n    }\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    setActiveId(null);\n    if (!over || active.id === over.id) return;\n\n    const activeMessage = messages.find((msg) => msg.id === active.id);\n    const overMessage = messages.find((msg) => msg.id === over.id);\n\n    if (dragOverInfo && dragOverInfo.overId === over.id) {\n      if (dragOverInfo.isOverMiddle) {\n        // Reorder\n        const oldIndex = messages.findIndex((msg) => msg.id === active.id);\n        const newIndex = messages.findIndex((msg) => msg.id === over.id);\n        const reorderedMessages = arrayMove(messages, oldIndex, newIndex).map((msg, index) => ({\n          ...msg,\n          order: index + 1,\n        }));\n        setMessages(reorderedMessages);\n      } else {\n        // Merge\n        const mergedMessage = {\n          ...overMessage,\n          text: `${overMessage.text} ${activeMessage.text}`,\n        };\n        const updatedMessages = messages\n          .filter((msg) => msg.id !== active.id)\n          .map((msg) => (msg.id === over.id ? mergedMessage : msg))\n          .map((msg, index) => ({ ...msg, order: index + 1 }));\n        setMessages(updatedMessages);\n      }\n    }\n\n    setDragOverInfo(null);\n    dragStartPositionRef.current = null;\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext \n        sensors={sensors}\n        collisionDetection={closestCenter} \n        onDragStart={handleDragStart}\n        onDragMove={handleDragMove}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble \n                key={message.id} \n                message={message}\n                isDraggingOver={dragOverInfo && dragOverInfo.overId === message.id}\n                isOverMiddle={dragOverInfo && dragOverInfo.overId === message.id && dragOverInfo.isOverMiddle}\n              />\n            ))}\n          </div>\n        </SortableContext>\n        <DragOverlay>\n          {activeId ? <MessageBubble message={messages.find(msg => msg.id === activeId)} /> : null}\n        </DragOverlay>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message, isDraggingOver, isOverMiddle }) => {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: message.id });\n\n  const style = {\n    transition: 'none', // Disable transition to prevent movement\n    opacity: isDragging ? 0.5 : 1,\n    // Add visual cues for merging or reordering\n    borderTop: isDraggingOver && isOverMiddle ? '2px solid red' : 'none',\n    borderBottom: isDraggingOver && !isOverMiddle ? '2px solid green' : 'none',\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}