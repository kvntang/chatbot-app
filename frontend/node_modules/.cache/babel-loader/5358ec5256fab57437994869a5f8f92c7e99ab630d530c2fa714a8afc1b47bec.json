{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n\n  // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n  // Override the merged-message class with over-message if the message is both merged and being hovered over\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n\n  // Add a blue background when the message is being dragged, unless it's already green (merged)\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n\n  // If the message is merged, keep it green even when dragging\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageBubble;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(SortableMessageBubble, \"InVr0b5Mi061/rJry+Zf96inIeQ=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    const mergeMessage = (activeMessage, overMessage) => {\n      const mergedMessage = {\n        ...overMessage,\n        text: `${overMessage.text} ${activeMessage.text}`,\n        isMerged: true\n      };\n      console.log(`merged is true for ${mergedMessage.text}`);\n      return mergedMessage;\n    };\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n    let reorderedMessages;\n    if (isOverThreshold) {\n      // Merge messages\n      const activeMessage = messages[activeIndex];\n      const overMessage = messages[overIndex];\n      const mergedMessage = mergeMessage(activeMessage, overMessage);\n      reorderedMessages = messages.filter(msg => msg.id !== active.id).map(msg => {\n        return msg.id === over.id ? mergedMessage : msg;\n      });\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n    }\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    //check it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n      index: index + 1,\n      text: msg.text\n    })));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c3 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");\n$RefreshReg$(_c3, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","SortableContext","arrayMove","useSortable","CSS","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","SortableMessageBubble","_s","attributes","listeners","setNodeRef","transform","transition","id","style","Transform","toString","ref","_c2","ChatBox","_s2","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","prevMessages","order","length","setTimeout","botReply","updateMessageOrder","map","msg","index","handleDragEnd","event","active","over","activeIndex","findIndex","overIndex","mergeMessage","activeMessage","overMessage","mergedMessage","console","log","isOverThreshold","rect","top","height","current","translated","reorderedMessages","filter","collisionDetection","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c3","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n    let bubbleClass = message.sender === 'user' \n      ? 'user-message' \n      : message.sender === 'bot' \n        ? 'bot-message' \n        : 'merged-message';\n  \n    // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n    // Override the merged-message class with over-message if the message is both merged and being hovered over\n    const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  \n    // Add a blue background when the message is being dragged, unless it's already green (merged)\n    const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  \n    // If the message is merged, keep it green even when dragging\n    const mergedClass = message.isMerged ? 'merged-message' : '';\n  \n    return (\n      <div className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}>\n        {message.text}\n      </div>\n    );\n  };\n\nconst SortableMessageBubble = ({ message }) => {\n    const { \n        attributes, \n        listeners, \n        setNodeRef, \n        transform, \n        transition,\n        isDragging,\n        isOver,\n    } = useSortable({ id: message.id });\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n  \n    return ( //return the message bubble in a div with the style and attributes of the message bubble\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\n      </div>\n    );\n  };\n  \n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  \n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const updateMessageOrder = (messages) => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n  };\n  \n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    const mergeMessage = (activeMessage, overMessage) => {\n        const mergedMessage = {\n            ...overMessage,\n            text: `${overMessage.text} ${activeMessage.text}`,\n            isMerged: true,\n          };\n          console.log(`merged is true for ${mergedMessage.text}`);\n          return mergedMessage;\n    }\n\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n \n    let reorderedMessages;\n    if (isOverThreshold) {\n      // Merge messages\n      const activeMessage = messages[activeIndex];\n      const overMessage = messages[overIndex];\n      const mergedMessage = mergeMessage(activeMessage, overMessage);\n\n      reorderedMessages = messages.filter((msg) => msg.id !== active.id).map((msg) => {\n        return msg.id === over.id ? mergedMessage : msg;\n      });\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n    }\n\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    //check it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n        index: index + 1,\n        text: msg.text\n      })));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={rectIntersection} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default ChatBox;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}