{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin2.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection, useSensors, useSensor, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n\n  // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n  // Override the merged-message class with over-message if the message is both merged and being hovered over\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n\n  // Add a blue background when the message is being dragged, unless it's already green (merged)\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n\n  // If the message is merged, keep it green even when dragging\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageBubble;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(SortableMessageBubble, \"InVr0b5Mi061/rJry+Zf96inIeQ=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDragEnd = event => {\n    //\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      //if the active message is not the same as the over message\n\n      //find the index of the active and over messages\n      const activeIndex = messages.findIndex(msg => msg.id === active.id);\n      const overIndex = messages.findIndex(msg => msg.id === over.id);\n\n      // Perform simple reorder\n      const reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n\n      // Update message order\n      const updatedMessages = reorderedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n      setMessages(updatedMessages); //update the messages\n    }\n    ;\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    const handleDragOver = event => {\n      //\n      const {\n        active,\n        over\n      } = event;\n      if (active.id !== over.id) {\n        //if the active message is not the same as the over message\n        const activeIndex = messages.findIndex(msg => msg.id === active.id);\n        const overIndex = messages.findIndex(msg => msg.id === over.id);\n\n        // Check if the drag is more than halfway through the target item\n        const isOverThreshold = over.rect.top + over.rect.height * 0.5 > active.rect.current.translated.top;\n        if (isOverThreshold) {\n          // Merge messages\n          const activeMessage = messages[activeIndex];\n          const overMessage = messages[overIndex];\n          const mergedMessage = {\n            ...overMessage,\n            text: `${overMessage.text} ${activeMessage.text}`,\n            isMerged: true\n          };\n          const updatedMessages = messages.filter(msg => msg.id !== active.id).map(msg => {\n            if (msg.id === over.id) {\n              return mergedMessage;\n            }\n            return msg;\n          });\n\n          // Update message order\n          const reorderedMessages = updatedMessages.map((msg, index) => ({\n            ...msg,\n            order: index + 1\n          }));\n          setMessages(reorderedMessages);\n        }\n      }\n    };\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: rectIntersection,\n        onDragEnd: handleDragEnd,\n        onDragOver: handleDragOver,\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: messages,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"messages-container\",\n            children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n              message: message\n            }, message.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleInputChange,\n          placeholder: \"Type your message...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this);\n  };\n};\n_s2(ChatBox, \"upBoktlDDJdZwxHJ5WGttQLF6kk=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c3 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");\n$RefreshReg$(_c3, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","useSensors","useSensor","PointerSensor","KeyboardSensor","SortableContext","arrayMove","sortableKeyboardCoordinates","useSortable","CSS","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","SortableMessageBubble","_s","attributes","listeners","setNodeRef","transform","transition","id","style","Transform","toString","ref","_c2","ChatBox","_s2","messages","setMessages","inputValue","setInputValue","sensors","coordinateGetter","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","prevMessages","order","length","setTimeout","botReply","handleDragEnd","event","active","over","activeIndex","findIndex","msg","overIndex","reorderedMessages","updatedMessages","map","index","handleDragOver","isOverThreshold","rect","top","height","current","translated","activeMessage","overMessage","mergedMessage","filter","collisionDetection","onDragEnd","onDragOver","items","type","onChange","placeholder","onKeyPress","key","onClick","_c3","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin2.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, rectIntersection, useSensors, useSensor, PointerSensor, KeyboardSensor } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n\n\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n    let bubbleClass = message.sender === 'user' \n      ? 'user-message' \n      : message.sender === 'bot' \n        ? 'bot-message' \n        : 'merged-message';\n  \n    // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n    // Override the merged-message class with over-message if the message is both merged and being hovered over\n    const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  \n    // Add a blue background when the message is being dragged, unless it's already green (merged)\n    const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  \n    // If the message is merged, keep it green even when dragging\n    const mergedClass = message.isMerged ? 'merged-message' : '';\n  \n    return (\n      <div className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}>\n        {message.text}\n      </div>\n    );\n  };\n\nconst SortableMessageBubble = ({ message }) => {\n    const { \n        attributes, \n        listeners, \n        setNodeRef, \n        transform, \n        transition,\n        isDragging,\n        isOver,\n    } = useSortable({ id: message.id });\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n  \n    return ( //return the message bubble in a div with the style and attributes of the message bubble\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\n      </div>\n    );\n  };\n  \n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  \n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDragEnd = (event) => { //\n    const { active, over } = event;\n  \n    if (active.id !== over.id) { //if the active message is not the same as the over message\n\n      //find the index of the active and over messages\n      const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n      const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n      // Perform simple reorder\n      const reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n\n      // Update message order\n      const updatedMessages = reorderedMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n\n    setMessages(updatedMessages); //update the messages\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  const handleDragOver = (event) => { //\n    const { active, over } = event;\n\n    if (active.id !== over.id){ //if the active message is not the same as the over message\n      const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n      const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    // Check if the drag is more than halfway through the target item\n    const isOverThreshold = over.rect.top + over.rect.height * 0.5 > active.rect.current.translated.top;\n\n    if (isOverThreshold) {\n      // Merge messages\n      const activeMessage = messages[activeIndex];\n      const overMessage = messages[overIndex];\n      const mergedMessage = {\n        ...overMessage,\n          text: `${overMessage.text} ${activeMessage.text}`,\n          isMerged: true,\n        };\n\n        const updatedMessages = messages.filter((msg) => msg.id !== active.id).map((msg) => {\n          if (msg.id === over.id) {\n            return mergedMessage;\n          }\n          return msg;\n        });\n\n        // Update message order\n        const reorderedMessages = updatedMessages.map((msg, index) => ({\n          ...msg,\n          order: index + 1,\n        }));\n\n        setMessages(reorderedMessages);\n      }\n    }\n  };\n\n\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext \n        sensors={sensors}\n        collisionDetection={rectIntersection} \n        onDragEnd={handleDragEnd}\n        onDragOver={handleDragOver}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n};\n\nexport default ChatBox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}