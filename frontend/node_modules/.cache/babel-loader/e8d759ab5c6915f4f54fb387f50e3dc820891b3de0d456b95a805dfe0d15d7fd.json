{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Add this function at the top of your component or in a utility file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateUniqueId = prefix => {\n  return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n\n  // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n  // Override the merged-message class with over-message if the message is both merged and being hovered over\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n\n  // Add a blue background when the message is being dragged, unless it's already green (merged)\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n\n  // If the message is merged, keep it green even when dragging\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageBubble;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(SortableMessageBubble, \"InVr0b5Mi061/rJry+Zf96inIeQ=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true\n    };\n\n    // Remove the active message and replace the over message with the merged message\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\n    updatedMessages[overIndex] = mergedMessage;\n    return updatedMessages;\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    let reorderedMessages;\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n    let insertionIndex;\n    if (isOverThreshold) {\n      // Merge messages\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n      insertionIndex = overIndex;\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      insertionIndex = overIndex;\n    }\n\n    // remove the history\n    const remove = reorderedMessages.length - insertionIndex - 1;\n    // Remove the last 'indexDifference - 1' number of messages\n    console.log(\"remove:\", remove);\n    if (remove > 1) {\n      reorderedMessages = reorderedMessages.slice(0, -remove);\n    }\n    // Update the display by setting the new messages\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    // Auto-generate new messages with delay\n    const generateMessagesWithDelay = index => {\n      if (index >= Math.max(1, remove) / 2) return;\n      setTimeout(() => {\n        const newUserMessage = {\n          id: generateUniqueId('user'),\n          text: `Alternate timeline message ${index + 1}`,\n          sender: 'user'\n        };\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages, newUserMessage];\n          return updateMessageOrder(updatedMessages);\n        });\n\n        // Simulate bot response with additional delay only if remove > 1\n        if (remove > 1) {\n          setTimeout(() => {\n            const botReply = {\n              id: generateUniqueId('bot'),\n              text: `Bot reply to: Alternate timeline message ${index + 1}`,\n              sender: 'bot'\n            };\n            setMessages(prevMessages => {\n              const updatedMessages = [...prevMessages, botReply];\n              return updateMessageOrder(updatedMessages);\n            });\n\n            // Generate next message pair\n            generateMessagesWithDelay(index + 1);\n          }, 500); // Delay for bot response\n        } else {\n          // If remove is 1, don't generate bot response and stop here\n          return;\n        }\n      }, 1000); // Delay for user message\n    };\n\n    // Start generating messages with delay\n    generateMessagesWithDelay(0);\n\n    //print it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n      index: index + 1,\n      text: msg.text\n    })));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c3 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");\n$RefreshReg$(_c3, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","SortableContext","arrayMove","useSortable","CSS","jsxDEV","_jsxDEV","generateUniqueId","prefix","Date","now","Math","random","toString","substr","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","SortableMessageBubble","_s","attributes","listeners","setNodeRef","transform","transition","id","style","Transform","ref","_c2","ChatBox","_s2","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","prevMessages","order","length","setTimeout","botReply","updateMessageOrder","map","msg","index","mergeAndUpdateMessages","activeId","overId","activeIndex","findIndex","overIndex","activeMessage","overMessage","mergedMessage","updatedMessages","filter","handleDragEnd","event","active","over","reorderedMessages","isOverThreshold","rect","top","height","current","translated","insertionIndex","remove","console","log","slice","generateMessagesWithDelay","max","newUserMessage","collisionDetection","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c3","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin1.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\n// Add this function at the top of your component or in a utility file\nconst generateUniqueId = (prefix) => {\n  return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n    let bubbleClass = message.sender === 'user' \n      ? 'user-message' \n      : message.sender === 'bot' \n        ? 'bot-message' \n        : 'merged-message';\n  \n    // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n    // Override the merged-message class with over-message if the message is both merged and being hovered over\n    const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  \n    // Add a blue background when the message is being dragged, unless it's already green (merged)\n    const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  \n    // If the message is merged, keep it green even when dragging\n    const mergedClass = message.isMerged ? 'merged-message' : '';\n  \n    return (\n      <div className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}>\n        {message.text}\n      </div>\n    );\n  };\n\nconst SortableMessageBubble = ({ message }) => {\n    const { \n        attributes, \n        listeners, \n        setNodeRef, \n        transform, \n        transition,\n        isDragging,\n        isOver,\n    } = useSortable({ id: message.id });\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n    };\n  \n    return ( //return the message bubble in a div with the style and attributes of the message bubble\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\n      </div>\n    );\n  };\n  \n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  \n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const updateMessageOrder = (messages) => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n  };\n  \n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true,\n    };\n\n    // Remove the active message and replace the over message with the merged message\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\n    updatedMessages[overIndex] = mergedMessage;\n\n    return updatedMessages;\n  };\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\n\n    let reorderedMessages;\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n\n    let insertionIndex;\n    if (isOverThreshold) {\n      // Merge messages\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n      insertionIndex = overIndex;\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      insertionIndex = overIndex;\n    }\n\n    // remove the history\n    const remove = reorderedMessages.length - insertionIndex -1;\n    // Remove the last 'indexDifference - 1' number of messages\n    console.log(\"remove:\", remove);\n    if (remove > 1) {\n      reorderedMessages = reorderedMessages.slice(0, -remove);\n    }\n    // Update the display by setting the new messages\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    // Auto-generate new messages with delay\n    const generateMessagesWithDelay = (index) => {\n      if (index >= Math.max(1, remove) / 2) return;\n\n      setTimeout(() => {\n        const newUserMessage = {\n          id: generateUniqueId('user'),\n          text: `Alternate timeline message ${index + 1}`,\n          sender: 'user',\n        };\n\n        setMessages(prevMessages => {\n          const updatedMessages = [...prevMessages, newUserMessage];\n          return updateMessageOrder(updatedMessages);\n        });\n\n        // Simulate bot response with additional delay only if remove > 1\n        if (remove > 1) {\n          setTimeout(() => {\n            const botReply = {\n              id: generateUniqueId('bot'),\n              text: `Bot reply to: Alternate timeline message ${index + 1}`,\n              sender: 'bot',\n            };\n\n            setMessages(prevMessages => {\n              const updatedMessages = [...prevMessages, botReply];\n              return updateMessageOrder(updatedMessages);\n            });\n\n            // Generate next message pair\n            generateMessagesWithDelay(index + 1);\n          }, 500); // Delay for bot response\n        } else {\n          // If remove is 1, don't generate bot response and stop here\n          return;\n        }\n      }, 1000); // Delay for user message\n    };\n\n    // Start generating messages with delay\n    generateMessagesWithDelay(0);\n\n    //print it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n        index: index + 1,\n        text: msg.text\n      })));\n\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={rectIntersection} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default ChatBox;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}