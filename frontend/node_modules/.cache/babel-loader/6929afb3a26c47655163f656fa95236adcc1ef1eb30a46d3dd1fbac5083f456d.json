{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin2.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// this is the component that renders the chat window and the input box\n// the bot will reply with the same message back to the user\n\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter, userDroppable } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || !active) {\n      return;\n    }\n\n    // Find the current mouse position\n    const overElement = document.getElementById(over.id);\n    if (!overElement) {\n      return;\n    }\n    const overRect = overElement.getBoundingClientRect(); // Get bounding box of hovered element\n    const overMiddleY = (overRect.bottom - overRect.top) / 2; // Calculate vertical midpoint of the hovered element\n    const clientY = event.clientY; // Get current mouse Y-position (relative to the viewport)\n\n    const dragId = active.id;\n    const hoverId = over.id;\n    if (dragId !== hoverId) {\n      const oldIndex = messages.findIndex(msg => msg.id === dragId);\n      const newIndex = messages.findIndex(msg => msg.id === hoverId);\n\n      // Reorder only if the mouse crossed the vertical midpoint of the hovered element\n      if (clientY < overRect.top + overMiddleY && oldIndex < newIndex) {\n        return; // Don't move up if the mouse is in the upper half but the dragged item is already above\n      }\n      if (clientY > overRect.top + overMiddleY && oldIndex > newIndex) {\n        return; // Don't move down if the mouse is in the lower half but the dragged item is already below\n      }\n\n      // Move the item in the list\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n\n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1\n      }));\n      setMessages(reorderedMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","DndContext","closestCenter","userDroppable","arrayMove","SortableContext","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","id","Date","now","toString","text","sender","prevMessages","order","length","setTimeout","botReply","handleDragEnd","event","active","over","overElement","document","getElementById","overRect","getBoundingClientRect","overMiddleY","bottom","top","clientY","dragId","hoverId","oldIndex","findIndex","msg","newIndex","newMessages","reorderedMessages","map","index","className","children","collisionDetection","onDragEnd","items","message","SortableMessageBubble","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","style","Transform","ref","_c2","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/kevin2.js"],"sourcesContent":["// this is the component that renders the chat window and the input box\n// the bot will reply with the same message back to the user\n\nimport React, { useState } from 'react';\nimport { DndContext, closestCenter, userDroppable } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Bot reply to: ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n  \n    if (!over || !active) {\n      return;\n    }\n  \n    // Find the current mouse position\n    const overElement = document.getElementById(over.id);\n    if (!overElement) {\n      return;\n    }\n  \n    const overRect = overElement.getBoundingClientRect(); // Get bounding box of hovered element\n    const overMiddleY = (overRect.bottom - overRect.top) / 2; // Calculate vertical midpoint of the hovered element\n    const clientY = event.clientY; // Get current mouse Y-position (relative to the viewport)\n  \n    const dragId = active.id;\n    const hoverId = over.id;\n  \n    if (dragId !== hoverId) {\n      const oldIndex = messages.findIndex((msg) => msg.id === dragId);\n      const newIndex = messages.findIndex((msg) => msg.id === hoverId);\n  \n      // Reorder only if the mouse crossed the vertical midpoint of the hovered element\n      if (clientY < overRect.top + overMiddleY && oldIndex < newIndex) {\n        return; // Don't move up if the mouse is in the upper half but the dragged item is already above\n      }\n      if (clientY > overRect.top + overMiddleY && oldIndex > newIndex) {\n        return; // Don't move down if the mouse is in the lower half but the dragged item is already below\n      }\n  \n      // Move the item in the list\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n  \n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => ({\n        ...msg,\n        order: index + 1,\n      }));\n  \n      setMessages(reorderedMessages);\n    }\n  };\n  \n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}