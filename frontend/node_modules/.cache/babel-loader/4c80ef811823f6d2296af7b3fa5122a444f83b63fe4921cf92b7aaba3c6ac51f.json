{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zkdeo\\\\Documents\\\\GitHub\\\\chatbot-app\\\\frontend\\\\src\\\\components\\\\zach1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n\n  // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\n  // Override the merged-message class with over-message if the message is both merged and being hovered over\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n\n  // Add a blue background when the message is being dragged, unless it's already green (merged)\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n\n  // If the message is merged, keep it green even when dragging\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n\n  //Add trash class if message is dragged over trash can icon/area\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageBubble;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return (\n    /*#__PURE__*/\n    //return the message bubble in a div with the style and attributes of the message bubble\n    _jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n        message: message,\n        isDragging: isDragging,\n        isOver: isOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(SortableMessageBubble, \"2gsSzao6V7eVryHnF8Hy0aZ1pSE=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true\n    };\n\n    // Remove the active message and replace the over message with the merged message\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\n    updatedMessages[overIndex] = mergedMessage;\n    return updatedMessages;\n  };\n\n  // Auto-generate new messages with delay\n  const generateFutureUserMessage = index => {\n    setTimeout(() => {\n      const newUserMessage = {\n        id: Date.now().toString() + index,\n        text: `Alternate timeline message ${index + 1}`,\n        sender: 'user'\n      };\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, newUserMessage];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Add a delay for the user message\n  };\n  const generateFutureBotMessage = index => {\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString() + index,\n        text: `Bot reply to: Alternate timeline message ${index}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages, botReply];\n        return updateMessageOrder(updatedMessages);\n      });\n    }, 500); // Delay for bot response\n  };\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const activeIndex = messages.findIndex(msg => msg.id === active.id);\n    const overIndex = messages.findIndex(msg => msg.id === over.id);\n    let reorderedMessages;\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n    let insertionIndex;\n    if (isOverThreshold) {\n      // Merge messages\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n      insertionIndex = overIndex;\n    } else {\n      // Simple reorder\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      insertionIndex = overIndex;\n    }\n\n    // remove the history\n    const remove = reorderedMessages.length - insertionIndex - 1;\n    // Remove the last 'indexDifference - 1' number of messages\n    if (remove > 1) {\n      reorderedMessages = reorderedMessages.slice(0, -remove);\n    }\n    // Update the display by setting the new messages\n    setMessages(updateMessageOrder(reorderedMessages));\n\n    //get how many messages need to be generated\n    const generateAmount = remove;\n    console.log(\"Insertion at:\", insertionIndex);\n    console.log(\"need to generate:\", remove);\n\n    // Start generating messages with delay\n    const baseIndex = reorderedMessages.length;\n    let generatedCount = 0;\n    let i = 0;\n    while (generatedCount < generateAmount) {\n      if (generatedCount % 2 === 0) {\n        generateFutureUserMessage(baseIndex + i);\n      } else {\n        generateFutureBotMessage(baseIndex + i);\n      }\n      generatedCount++;\n      i++;\n    }\n\n    //print it\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\n      index: index + 1,\n      text: msg.text\n    })));\n  };\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"trash-drop\",\n          children: \"trash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatBox, \"slbeoFq67b53BRRhfk6DiRI5k0A=\");\n_c3 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");\n$RefreshReg$(_c3, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","SortableContext","arrayMove","useSortable","CSS","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","SortableMessageBubble","_s","attributes","listeners","setNodeRef","transform","transition","id","style","Transform","toString","ref","_c2","ChatBox","_s2","messages","setMessages","inputValue","setInputValue","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","prevMessages","order","length","setTimeout","botReply","updateMessageOrder","map","msg","index","mergeAndUpdateMessages","activeId","overId","activeIndex","findIndex","overIndex","activeMessage","overMessage","mergedMessage","updatedMessages","filter","generateFutureUserMessage","newUserMessage","generateFutureBotMessage","handleDragEnd","event","active","over","reorderedMessages","isOverThreshold","rect","top","height","current","translated","insertionIndex","remove","slice","generateAmount","console","log","baseIndex","generatedCount","i","collisionDetection","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/zkdeo/Documents/GitHub/chatbot-app/frontend/src/components/zach1.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { DndContext, rectIntersection } from '@dnd-kit/core';\r\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\r\nimport { useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\n\r\n\r\nconst MessageBubble = ({ message, isOver, isDragging }) => {\r\n    let bubbleClass = message.sender === 'user' \r\n      ? 'user-message' \r\n      : message.sender === 'bot' \r\n        ? 'bot-message' \r\n        : 'merged-message';\r\n  \r\n    // Apply the `over-message` class if `isOver` is true and the current message is not the one being dragged (`!isDragging`)\r\n    // Override the merged-message class with over-message if the message is both merged and being hovered over\r\n    const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\r\n  \r\n    // Add a blue background when the message is being dragged, unless it's already green (merged)\r\n    const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\r\n  \r\n    // If the message is merged, keep it green even when dragging\r\n    const mergedClass = message.isMerged ? 'merged-message' : '';\r\n\r\n    //Add trash class if message is dragged over trash can icon/area\r\n    \r\n  \r\n    return (\r\n      <div className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}>\r\n        {message.text}\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst SortableMessageBubble = ({ message }) => {\r\n    const { \r\n        attributes, \r\n        listeners, \r\n        setNodeRef, \r\n        transform, \r\n        transition,\r\n        isDragging,\r\n        isOver,\r\n    } = useSortable({ id: message.id });\r\n  \r\n    const style = {\r\n      transform: CSS.Transform.toString(transform),\r\n      transition,\r\n    };\r\n  \r\n    return ( //return the message bubble in a div with the style and attributes of the message bubble\r\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n        <MessageBubble message={message} isDragging={isDragging} isOver={isOver}/>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\nconst ChatBox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (inputValue.trim() === '') return;\r\n\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      text: inputValue,\r\n      sender: 'user',\r\n    };\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { ...newMessage, order: prevMessages.length + 1 },\r\n    ]);\r\n    setInputValue('');\r\n\r\n    // Simulate bot response\r\n    setTimeout(() => {\r\n      const botReply = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: `Hello ${inputValue}`,\r\n        sender: 'bot',\r\n      };\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { ...botReply, order: prevMessages.length + 1 },\r\n      ]);\r\n    }, 1000);\r\n  };\r\n\r\n  const updateMessageOrder = (messages) => {\r\n    return messages.map((msg, index) => ({\r\n      ...msg,\r\n      order: index + 1,\r\n    }));\r\n  };\r\n  \r\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\r\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\r\n    const overIndex = messages.findIndex(msg => msg.id === overId);\r\n    const activeMessage = messages[activeIndex];\r\n    const overMessage = messages[overIndex];\r\n\r\n    const mergedMessage = {\r\n      ...overMessage,\r\n      text: `${overMessage.text} ${activeMessage.text}`,\r\n      isMerged: true,\r\n    };\r\n\r\n    // Remove the active message and replace the over message with the merged message\r\n    const updatedMessages = messages.filter(msg => msg.id !== activeId);\r\n    updatedMessages[overIndex] = mergedMessage;\r\n\r\n    return updatedMessages;\r\n  };\r\n\r\n  // Auto-generate new messages with delay\r\n  const generateFutureUserMessage = (index) => {\r\n    setTimeout(() => {\r\n      const newUserMessage = {\r\n        id: Date.now().toString() + index,\r\n        text: `Alternate timeline message ${index + 1}`,\r\n        sender: 'user',\r\n      };\r\n\r\n      setMessages(prevMessages => {\r\n        const updatedMessages = [...prevMessages, newUserMessage];\r\n        return updateMessageOrder(updatedMessages);\r\n      });\r\n    }, 500); // Add a delay for the user message\r\n  };\r\n\r\n  const generateFutureBotMessage = (index) => {\r\n    setTimeout(() => {\r\n      const botReply = {\r\n        id: (Date.now() + 1).toString() + index,\r\n        text: `Bot reply to: Alternate timeline message ${index}`,\r\n        sender: 'bot',\r\n      };\r\n\r\n      setMessages(prevMessages => {\r\n        const updatedMessages = [...prevMessages, botReply];\r\n        return updateMessageOrder(updatedMessages);\r\n      });\r\n    }, 500); // Delay for bot response\r\n  };\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (!over || active.id === over.id) {\r\n      return;\r\n    }\r\n\r\n    const activeIndex = messages.findIndex((msg) => msg.id === active.id);\r\n    const overIndex = messages.findIndex((msg) => msg.id === over.id);\r\n\r\n    let reorderedMessages;\r\n    const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\r\n\r\n    let insertionIndex;\r\n    if (isOverThreshold) {\r\n      // Merge messages\r\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\r\n      insertionIndex = overIndex;\r\n    } else {\r\n      // Simple reorder\r\n      reorderedMessages = arrayMove(messages, activeIndex, overIndex);\r\n      insertionIndex = overIndex;\r\n    }\r\n\r\n    // remove the history\r\n    const remove = reorderedMessages.length - insertionIndex -1;\r\n    // Remove the last 'indexDifference - 1' number of messages\r\n    if (remove > 1) {\r\n      reorderedMessages = reorderedMessages.slice(0, -remove);\r\n    }\r\n    // Update the display by setting the new messages\r\n    setMessages(updateMessageOrder(reorderedMessages));\r\n\r\n    //get how many messages need to be generated\r\n    const generateAmount = remove;\r\n    console.log(\"Insertion at:\", insertionIndex);\r\n    console.log(\"need to generate:\", remove);\r\n\r\n    // Start generating messages with delay\r\n    const baseIndex = reorderedMessages.length;\r\n    let generatedCount = 0;\r\n    let i = 0;\r\n    while (generatedCount < generateAmount) {\r\n      if (generatedCount % 2 === 0) {\r\n        generateFutureUserMessage(baseIndex + i);\r\n      } else {\r\n        generateFutureBotMessage(baseIndex + i);\r\n      }\r\n      generatedCount++;\r\n      i++;\r\n    }\r\n\r\n\r\n    //print it\r\n    console.log(\"New order:\", reorderedMessages.map((msg, index) => ({\r\n        index: index + 1,\r\n        text: msg.text\r\n      })));\r\n\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"chat-box\">\r\n      <DndContext collisionDetection={rectIntersection} onDragEnd={handleDragEnd}>\r\n        <SortableContext items={messages}>\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <SortableMessageBubble key={message.id} message={message} />\r\n            ))}\r\n          </div>\r\n\r\n          <div id=\"trash-drop\">\r\n                trash\r\n            </div> \r\n        </SortableContext>\r\n            \r\n      </DndContext>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ChatBox;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}