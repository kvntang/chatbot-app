{"ast":null,"code":"var _jsxFileName = \"/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/chatbot_debug.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DndContext, rectIntersection, useDroppable, DragOverlay } from '@dnd-kit/core';\nimport { SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isOver,\n  isDragging\n}) => {\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = MessageBubble;\nfunction TrashCan({\n  isOver\n}) {\n  _s();\n  const {\n    setNodeRef\n  } = useDroppable({\n    id: 'trash-drop'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"trash-drop\",\n    ref: setNodeRef,\n    className: isOver ? 'drag-over' : '',\n    children: \"Trash\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(TrashCan, \"cRxoCnej0Qm2GWGzi2a2LoWImLI=\", false, function () {\n  return [useDroppable];\n});\n_c2 = TrashCan;\nconst SortableMessageBubble = ({\n  message,\n  isDragging\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isOver\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    position: 'relative',\n    zIndex: isDragging ? 1000 : 1,\n    opacity: isDragging ? 0 : 1 // Make the bubble transparent when dragging\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message,\n      isDragging: isDragging,\n      isOver: isOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"lr7gti2608MppW/oYbk3QxIvltI=\", false, function () {\n  return [useSortable];\n});\n_c3 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s3();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isDragging, setDragging] = useState(false);\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [trashCanIsOver, setTrashCanIsOver] = useState(false);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n\n  // Corrected mergeAndUpdateMessages function\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeMessage = messages.find(msg => msg.id === activeId);\n    const overMessage = messages.find(msg => msg.id === overId);\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true\n    };\n    const updatedMessages = messages.filter(msg => msg.id !== activeId).map(msg => msg.id === overId ? mergedMessage : msg);\n    return updatedMessages;\n  };\n  const handleDragStart = event => {\n    setDragging(true);\n    setDraggedItem(event.active.id);\n    setActiveId(event.active.id);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    setDragging(false);\n    setDraggedItem(null);\n    setActiveId(null);\n    setTrashCanIsOver(false);\n    if (!over || active.id === over.id) {\n      return;\n    }\n    let reorderedMessages;\n    if (over.id === 'trash-drop') {\n      reorderedMessages = messages.filter(msg => msg.id !== active.id);\n    } else {\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n    }\n    setMessages(updateMessageOrder(reorderedMessages));\n  };\n  const handleDragOver = event => {\n    const {\n      over\n    } = event;\n    if (over && over.id === 'trash-drop') {\n      setTrashCanIsOver(true);\n    } else {\n      setTrashCanIsOver(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragStart: handleDragStart,\n      onDragOver: handleDragOver,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            isDragging: isDragging && draggedItem === message.id\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), isDragging && /*#__PURE__*/_jsxDEV(TrashCan, {\n        isOver: trashCanIsOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId ? /*#__PURE__*/_jsxDEV(MessageBubble, {\n          message: messages.find(msg => msg.id === activeId),\n          isDragging: true,\n          isOver: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s3(ChatBox, \"c2uT9jABw2WCEe1OuSIqwgMjAOY=\");\n_c4 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"TrashCan\");\n$RefreshReg$(_c3, \"SortableMessageBubble\");\n$RefreshReg$(_c4, \"ChatBox\");","map":{"version":3,"names":["React","useState","DndContext","rectIntersection","useDroppable","DragOverlay","SortableContext","useSortable","CSS","jsxDEV","_jsxDEV","MessageBubble","message","isOver","isDragging","bubbleClass","sender","dropzoneClass","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","TrashCan","_s","setNodeRef","id","ref","_c2","SortableMessageBubble","_s2","attributes","listeners","transform","transition","style","Transform","toString","position","zIndex","opacity","_c3","ChatBox","_s3","messages","setMessages","inputValue","setInputValue","setDragging","draggedItem","setDraggedItem","activeId","setActiveId","trashCanIsOver","setTrashCanIsOver","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","prevMessages","order","length","setTimeout","botReply","updateMessageOrder","map","msg","index","mergeAndUpdateMessages","overId","activeMessage","find","overMessage","mergedMessage","updatedMessages","filter","handleDragStart","event","active","handleDragEnd","over","reorderedMessages","handleDragOver","collisionDetection","onDragStart","onDragOver","onDragEnd","items","type","onChange","placeholder","onKeyPress","key","onClick","_c4","$RefreshReg$"],"sources":["/Users/kevin/Documents/GitHub/chatbot-app/frontend/src/components/chatbot_debug.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  DndContext,\n  rectIntersection,\n  useDroppable,\n  DragOverlay,\n} from '@dnd-kit/core';\nimport { SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\nconst MessageBubble = ({ message, isOver, isDragging }) => {\n  let bubbleClass =\n    message.sender === 'user'\n      ? 'user-message'\n      : message.sender === 'bot'\n      ? 'bot-message'\n      : 'merged-message';\n\n  const dropzoneClass = isOver && !isDragging ? 'over-message' : '';\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n\n  return (\n    <div\n      className={`message-bubble ${bubbleClass} ${dropzoneClass} ${draggingClass} ${mergedClass}`}\n    >\n      {message.text}\n    </div>\n  );\n};\n\nfunction TrashCan({ isOver }) {\n  const { setNodeRef } = useDroppable({\n    id: 'trash-drop',\n  });\n\n  return (\n    <div\n      id=\"trash-drop\"\n      ref={setNodeRef}\n      className={isOver ? 'drag-over' : ''}\n    >\n      Trash\n    </div>\n  );\n}\n\nconst SortableMessageBubble = ({ message, isDragging }) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isOver,\n  } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    position: 'relative',\n    zIndex: isDragging ? 1000 : 1,\n    opacity: isDragging ? 0 : 1, // Make the bubble transparent when dragging\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble\n        message={message}\n        isDragging={isDragging}\n        isOver={isOver}\n      />\n    </div>\n  );\n};\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isDragging, setDragging] = useState(false);\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [trashCanIsOver, setTrashCanIsOver] = useState(false);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    setTimeout(() => {\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: `Hello ${inputValue}`,\n        sender: 'bot',\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const updateMessageOrder = (messages) => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1,\n    }));\n  };\n\n  // Corrected mergeAndUpdateMessages function\n  const mergeAndUpdateMessages = (messages, activeId, overId) => {\n    const activeMessage = messages.find((msg) => msg.id === activeId);\n    const overMessage = messages.find((msg) => msg.id === overId);\n\n    const mergedMessage = {\n      ...overMessage,\n      text: `${overMessage.text} ${activeMessage.text}`,\n      isMerged: true,\n    };\n\n    const updatedMessages = messages\n      .filter((msg) => msg.id !== activeId)\n      .map((msg) => (msg.id === overId ? mergedMessage : msg));\n\n    return updatedMessages;\n  };\n\n  const handleDragStart = (event) => {\n    setDragging(true);\n    setDraggedItem(event.active.id);\n    setActiveId(event.active.id);\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    setDragging(false);\n    setDraggedItem(null);\n    setActiveId(null);\n    setTrashCanIsOver(false);\n\n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    let reorderedMessages;\n\n    if (over.id === 'trash-drop') {\n      reorderedMessages = messages.filter((msg) => msg.id !== active.id);\n    } else {\n      reorderedMessages = mergeAndUpdateMessages(messages, active.id, over.id);\n    }\n\n    setMessages(updateMessageOrder(reorderedMessages));\n  };\n\n  const handleDragOver = (event) => {\n    const { over } = event;\n\n    if (over && over.id === 'trash-drop') {\n      setTrashCanIsOver(true);\n    } else {\n      setTrashCanIsOver(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext\n        collisionDetection={rectIntersection}\n        onDragStart={handleDragStart}\n        onDragOver={handleDragOver}\n        onDragEnd={handleDragEnd}\n      >\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble\n                key={message.id}\n                message={message}\n                isDragging={isDragging && draggedItem === message.id}\n              />\n            ))}\n          </div>\n        </SortableContext>\n\n        {/* Render TrashCan outside of messages-container */}\n        {isDragging && <TrashCan isOver={trashCanIsOver} />}\n\n        <DragOverlay>\n          {activeId ? (\n            <MessageBubble\n              message={messages.find((msg) => msg.id === activeId)}\n              isDragging={true}\n              isOver={false}\n            />\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type your message...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}