{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheng\\\\chatbot-app\\\\frontend\\\\src\\\\components\\\\kevin_gpt3_debug.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\nimport { DndContext, DragOverlay, rectIntersection, useDroppable } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport axios from 'axios';\n\n// MessageBubble Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageBubble = ({\n  message,\n  isDragging\n}) => {\n  if (!message) {\n    return null;\n  }\n  let bubbleClass = message.sender === 'user' ? 'user-message' : message.sender === 'bot' ? 'bot-message' : 'merged-message';\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\n  const mergedClass = message.isMerged ? 'merged-message' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message-bubble ${bubbleClass} ${draggingClass} ${mergedClass}`,\n    children: message.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// TrashCan Component\n_c = MessageBubble;\nfunction TrashCan() {\n  _s();\n  const {\n    setNodeRef\n  } = useDroppable({\n    id: 'trash-drop'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"trash-drop\",\n    ref: setNodeRef,\n    className: \"trash-can\",\n    children: \"\\uD83D\\uDDD1\\uFE0F Trash\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n// SortableMessageBubble Component\n_s(TrashCan, \"cRxoCnej0Qm2GWGzi2a2LoWImLI=\", false, function () {\n  return [useDroppable];\n});\n_c2 = TrashCan;\nconst SortableMessageBubble = ({\n  message,\n  activeId\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id,\n    animateLayoutChanges: () => false // Disable layout animations to prevent ResizeObserver errors\n  });\n  const style = useMemo(() => ({\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: message.id === activeId ? 0 : 1,\n    // Hide the original item when dragging\n    zIndex: message.id === activeId ? 1000 : 'auto' // Ensure the dragged item is above others\n  }), [transform, transition, activeId, message.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message,\n      isDragging: message.id === activeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n// ChatBox Component\n_s2(SortableMessageBubble, \"cxeVYf38Htjo7KBtzHadPmdFYPg=\", false, function () {\n  return [useSortable];\n});\n_c3 = SortableMessageBubble;\nconst ChatBox = () => {\n  _s3();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // State for tracking the active draggable item\n  const [activeId, setActiveId] = useState(null);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user'\n    };\n    const fetchGenericBotResponse = async (messages, inputValue) => {\n      const messageHistory = [...messages.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      })), {\n        role: 'user',\n        content: inputValue\n      }];\n      try {\n        const response = await axios.post('http://localhost:3001/api/generic_bot', {\n          messageHistory\n        });\n        return {\n          id: (Date.now() + 1).toString(),\n          text: response.data.reply,\n          sender: 'bot'\n        };\n      } catch (error) {\n        console.error('Error fetching reply from the backend:', error);\n        return null;\n      }\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n    const genericBotReply = await fetchGenericBotResponse(messages, inputValue);\n    if (genericBotReply) {\n      setMessages(prevMessages => [...prevMessages, {\n        ...genericBotReply,\n        order: prevMessages.length + 1\n      }]);\n    }\n  };\n  const updateMessageOrder = messages => {\n    return messages.map((msg, index) => ({\n      ...msg,\n      order: index + 1\n    }));\n  };\n\n  // Helper function to get the opposite sender\n  const getOppositeSender = sender => {\n    return sender === 'user' ? 'bot' : 'user';\n  };\n\n  // Function to merge messages via API\n  const mergeMessagesViaAPI = async (message1, message2) => {\n    const messageHistory = [{\n      role: 'user',\n      content: message1\n    }, {\n      role: 'user',\n      content: message2\n    }];\n    try {\n      const response = await axios.post('http://localhost:3001/api/merge', {\n        messageHistory\n      });\n      console.log('Sent to merge API');\n      return response.data.reply; // Adjust based on your API's response structure\n    } catch (error) {\n      var _error$response;\n      console.error('Error merging messages:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      return `${message1} ${message2}`;\n    }\n  };\n\n  // Function to generate future user messages via API\n  const generateFutureUserMessage = async messageHistory => {\n    try {\n      const response = await axios.post('http://localhost:3001/api/user', {\n        messageHistory\n      });\n      console.log(\"rich kid mode\");\n      return {\n        id: Date.now().toString(),\n        text: response.data.reply,\n        // Adjust based on your API's response structure\n        sender: 'user'\n      };\n    } catch (error) {\n      var _error$response2;\n      console.error('Error generating future user message:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      return null;\n    }\n  };\n\n  // Function to generate future bot messages via API\n  const generateFutureBotMessage = async messageHistory => {\n    try {\n      const response = await axios.post('http://localhost:3001/api/bot', {\n        messageHistory\n      });\n      return {\n        id: Date.now().toString(),\n        text: response.data.reply,\n        // Adjust based on your API's response structure\n        sender: 'bot'\n      };\n    } catch (error) {\n      var _error$response3;\n      console.error('Error generating future bot message:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      return null;\n    }\n  };\n\n  // Updated mergeAndUpdateMessages function\n  const mergeAndUpdateMessages = async (messages, activeId, overId) => {\n    const activeIndex = messages.findIndex(msg => msg.id === activeId);\n    const overIndex = messages.findIndex(msg => msg.id === overId);\n    if (activeIndex === -1 || overIndex === -1) return messages;\n    const activeMessage = messages[activeIndex];\n    const overMessage = messages[overIndex];\n\n    // Show temporary \"Thinking...\" message\n    setMessages(prevMessages => [...prevMessages, {\n      id: 'thinking',\n      text: 'Thinking...',\n      sender: 'bot',\n      thinking: true\n    }]);\n\n    // Simulate thinking delay for 1.5 seconds\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Get merged text via API\n    const mergedText = await mergeMessagesViaAPI(overMessage.text, activeMessage.text);\n    const mergedMessage = {\n      ...overMessage,\n      text: mergedText,\n      isMerged: true\n    };\n\n    // Remove the \"Thinking...\" message\n    const updatedMessages = messages.filter(msg => msg.id !== 'thinking');\n\n    // Keep messages before the merged message\n    const messagesBeforeMerged = messages.slice(0, Math.min(activeIndex, overIndex));\n\n    // Determine how many new messages to generate\n    const messagesToGenerateCount = messages.length - messagesBeforeMerged.length - 2; // Adjusted to -1 to account for merged message being removed,, MIGHT NEED TO -2!!\n\n    // Generate new messages asynchronously\n    const startingSender = getOppositeSender(mergedMessage.sender);\n    const newReplies = [];\n    for (let i = 0; i < messagesToGenerateCount; i++) {\n      const sender = i % 2 === 0 ? startingSender : getOppositeSender(startingSender);\n\n      // Build the message history up to this point\n      const messageHistory = [...messagesBeforeMerged.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      })), {\n        role: mergedMessage.sender === 'user' ? 'user' : 'assistant',\n        content: mergedMessage.text\n      }, ...newReplies.map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'assistant',\n        content: msg.text\n      }))];\n\n      // Generate the next message using the appropriate API\n      let newMessage;\n      if (sender === 'user') {\n        newMessage = await generateFutureUserMessage(messageHistory);\n      } else {\n        newMessage = await generateFutureBotMessage(messageHistory);\n      }\n      if (newMessage) {\n        newReplies.push(newMessage);\n      } else {\n        // Stop generating messages if there's an error\n        break;\n      }\n    }\n\n    // Assemble the updated messages with fade-in effect\n    const finalMessages = [...updatedMessages, mergedMessage, ...newReplies];\n    return finalMessages;\n  };\n\n  // Drag event handlers\n  const handleDragStart = event => {\n    const {\n      active\n    } = event;\n    setActiveId(active.id);\n  };\n  const handleDragEnd = async event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (!over || active.id === over.id) {\n      return;\n    }\n    console.log('Dropped over:', over.id);\n    let reorderedMessages;\n\n    // If dropped over the trash can\n    if (over.id === 'trash-drop') {\n      reorderedMessages = messages.filter(msg => msg.id !== active.id);\n      setMessages(updateMessageOrder(reorderedMessages));\n      return;\n    }\n    // If dropped over another message, merge them\n    else {\n      const activeIndex = messages.findIndex(msg => msg.id === active.id);\n      const overIndex = messages.findIndex(msg => msg.id === over.id);\n      const isOverThreshold = over.rect.top + over.rect.height * 0.7 > active.rect.current.translated.top;\n      if (isOverThreshold) {\n        // Merge messages and generate new ones via API\n        reorderedMessages = await mergeAndUpdateMessages(messages, active.id, over.id);\n      } else {\n        // Simple reorder\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\n      }\n      setMessages(updateMessageOrder(reorderedMessages));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: rectIntersection,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages.map(message => message.id),\n        strategy: verticalListSortingStrategy // Use vertical list sorting strategy\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: [messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message,\n            activeId: activeId\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)), activeId && /*#__PURE__*/_jsxDEV(TrashCan, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        children: activeId ? messages.find(message => message.id === activeId) ? /*#__PURE__*/_jsxDEV(MessageBubble, {\n          message: messages.find(message => message.id === activeId),\n          isDragging: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this) : null : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n_s3(ChatBox, \"U2IWqxHaAvLBVaMSnAE6GmDpNII=\");\n_c4 = ChatBox;\nexport default ChatBox;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MessageBubble\");\n$RefreshReg$(_c2, \"TrashCan\");\n$RefreshReg$(_c3, \"SortableMessageBubble\");\n$RefreshReg$(_c4, \"ChatBox\");","map":{"version":3,"names":["React","useState","useMemo","DndContext","DragOverlay","rectIntersection","useDroppable","SortableContext","arrayMove","verticalListSortingStrategy","useSortable","CSS","axios","jsxDEV","_jsxDEV","MessageBubble","message","isDragging","bubbleClass","sender","draggingClass","isMerged","mergedClass","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","TrashCan","_s","setNodeRef","id","ref","_c2","SortableMessageBubble","activeId","_s2","attributes","listeners","transform","transition","animateLayoutChanges","style","Transform","toString","opacity","zIndex","_c3","ChatBox","_s3","messages","setMessages","inputValue","setInputValue","setActiveId","handleInputChange","e","target","value","handleSendMessage","trim","newMessage","Date","now","fetchGenericBotResponse","messageHistory","map","msg","role","content","response","post","data","reply","error","console","prevMessages","order","length","genericBotReply","updateMessageOrder","index","getOppositeSender","mergeMessagesViaAPI","message1","message2","log","_error$response","generateFutureUserMessage","_error$response2","generateFutureBotMessage","_error$response3","mergeAndUpdateMessages","overId","activeIndex","findIndex","overIndex","activeMessage","overMessage","thinking","Promise","resolve","setTimeout","mergedText","mergedMessage","updatedMessages","filter","messagesBeforeMerged","slice","Math","min","messagesToGenerateCount","startingSender","newReplies","i","push","finalMessages","handleDragStart","event","active","handleDragEnd","over","reorderedMessages","isOverThreshold","rect","top","height","current","translated","collisionDetection","onDragStart","onDragEnd","items","strategy","find","type","onChange","placeholder","onKeyPress","key","onClick","_c4","$RefreshReg$"],"sources":["C:/Users/Cheng/chatbot-app/frontend/src/components/kevin_gpt3_debug.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport {\r\n  DndContext,\r\n  DragOverlay,\r\n  rectIntersection,\r\n  useDroppable,\r\n} from '@dnd-kit/core';\r\nimport {\r\n  SortableContext,\r\n  arrayMove,\r\n  verticalListSortingStrategy,\r\n} from '@dnd-kit/sortable';\r\nimport { useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\nimport axios from 'axios';\r\n\r\n// MessageBubble Component\r\nconst MessageBubble = ({ message, isDragging }) => {\r\n  if (!message) {\r\n    return null;\r\n  }\r\n\r\n  let bubbleClass =\r\n    message.sender === 'user'\r\n      ? 'user-message'\r\n      : message.sender === 'bot'\r\n      ? 'bot-message'\r\n      : 'merged-message';\r\n\r\n  const draggingClass = isDragging && !message.isMerged ? 'dragging' : '';\r\n  const mergedClass = message.isMerged ? 'merged-message' : '';\r\n\r\n  return (\r\n    <div\r\n      className={`message-bubble ${bubbleClass} ${draggingClass} ${mergedClass}`}\r\n    >\r\n      {message.text}\r\n    </div>\r\n  );\r\n};\r\n\r\n// TrashCan Component\r\nfunction TrashCan() {\r\n  const { setNodeRef } = useDroppable({\r\n    id: 'trash-drop',\r\n  });\r\n\r\n  return (\r\n    <div id=\"trash-drop\" ref={setNodeRef} className=\"trash-can\">\r\n      🗑️ Trash\r\n    </div>\r\n  );\r\n}\r\n\r\n// SortableMessageBubble Component\r\nconst SortableMessageBubble = ({ message, activeId }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n  } = useSortable({\r\n    id: message.id,\r\n    animateLayoutChanges: () => false, // Disable layout animations to prevent ResizeObserver errors\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      transform: CSS.Transform.toString(transform),\r\n      transition,\r\n      opacity: message.id === activeId ? 0 : 1, // Hide the original item when dragging\r\n      zIndex: message.id === activeId ? 1000 : 'auto', // Ensure the dragged item is above others\r\n    }),\r\n    [transform, transition, activeId, message.id]\r\n  );\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n      <MessageBubble message={message} isDragging={message.id === activeId} />\r\n    </div>\r\n  );\r\n};\r\n\r\n// ChatBox Component\r\nconst ChatBox = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // State for tracking the active draggable item\r\n  const [activeId, setActiveId] = useState(null);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (inputValue.trim() === '') return;\r\n\r\n    const newMessage = {\r\n      id: Date.now().toString(),\r\n      text: inputValue,\r\n      sender: 'user',\r\n    };\r\n\r\n    const fetchGenericBotResponse = async (messages, inputValue) => {\r\n      const messageHistory = [\r\n        ...messages.map((msg) => ({\r\n          role: msg.sender === 'user' ? 'user' : 'assistant',\r\n          content: msg.text,\r\n        })),\r\n        { role: 'user', content: inputValue },\r\n      ];\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          'http://localhost:3001/api/generic_bot',\r\n          {\r\n            messageHistory,\r\n          }\r\n        );\r\n\r\n        return {\r\n          id: (Date.now() + 1).toString(),\r\n          text: response.data.reply,\r\n          sender: 'bot',\r\n        };\r\n      } catch (error) {\r\n        console.error('Error fetching reply from the backend:', error);\r\n        return null;\r\n      }\r\n    };\r\n\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { ...newMessage, order: prevMessages.length + 1 },\r\n    ]);\r\n\r\n    setInputValue('');\r\n\r\n    const genericBotReply = await fetchGenericBotResponse(messages, inputValue);\r\n\r\n    if (genericBotReply) {\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        { ...genericBotReply, order: prevMessages.length + 1 },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const updateMessageOrder = (messages) => {\r\n    return messages.map((msg, index) => ({\r\n      ...msg,\r\n      order: index + 1,\r\n    }));\r\n  };\r\n\r\n  // Helper function to get the opposite sender\r\n  const getOppositeSender = (sender) => {\r\n    return sender === 'user' ? 'bot' : 'user';\r\n  };\r\n\r\n  // Function to merge messages via API\r\n  const mergeMessagesViaAPI = async (message1, message2) => {\r\n    const messageHistory = [\r\n      { role: 'user', content: message1 },\r\n      { role: 'user', content: message2 },\r\n    ];\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/merge', {\r\n        messageHistory,\r\n      });\r\n      console.log('Sent to merge API');\r\n\r\n      return response.data.reply; // Adjust based on your API's response structure\r\n    } catch (error) {\r\n      console.error(\r\n        'Error merging messages:',\r\n        error.response?.data || error.message\r\n      );\r\n      return `${message1} ${message2}`;\r\n    }\r\n  };\r\n\r\n  // Function to generate future user messages via API\r\n  const generateFutureUserMessage = async (messageHistory) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/user', {\r\n        messageHistory,\r\n      });\r\n\r\n      console.log(\"rich kid mode\");\r\n\r\n      return {\r\n        id: Date.now().toString(),\r\n        text: response.data.reply, // Adjust based on your API's response structure\r\n        sender: 'user',\r\n      };\r\n    } catch (error) {\r\n      console.error(\r\n        'Error generating future user message:',\r\n        error.response?.data || error.message\r\n      );\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to generate future bot messages via API\r\n  const generateFutureBotMessage = async (messageHistory) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/api/bot', {\r\n        messageHistory,\r\n      });\r\n\r\n      return {\r\n        id: Date.now().toString(),\r\n        text: response.data.reply, // Adjust based on your API's response structure\r\n        sender: 'bot',\r\n      };\r\n    } catch (error) {\r\n      console.error(\r\n        'Error generating future bot message:',\r\n        error.response?.data || error.message\r\n      );\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Updated mergeAndUpdateMessages function\r\n  const mergeAndUpdateMessages = async (messages, activeId, overId) => {\r\n    const activeIndex = messages.findIndex((msg) => msg.id === activeId);\r\n    const overIndex = messages.findIndex((msg) => msg.id === overId);\r\n\r\n    if (activeIndex === -1 || overIndex === -1) return messages;\r\n\r\n    const activeMessage = messages[activeIndex];\r\n    const overMessage = messages[overIndex];\r\n\r\n    // Show temporary \"Thinking...\" message\r\n  setMessages((prevMessages) => [\r\n    ...prevMessages,\r\n    { id: 'thinking', text: 'Thinking...', sender: 'bot', thinking: true }\r\n  ]);\r\n\r\n  // Simulate thinking delay for 1.5 seconds\r\n  await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n    // Get merged text via API\r\n    const mergedText = await mergeMessagesViaAPI(\r\n      overMessage.text,\r\n      activeMessage.text\r\n    );\r\n\r\n    const mergedMessage = {\r\n      ...overMessage,\r\n      text: mergedText,\r\n      isMerged: true,\r\n    };\r\n\r\n    // Remove the \"Thinking...\" message\r\n    const updatedMessages = messages.filter((msg) => msg.id !== 'thinking');\r\n\r\n    // Keep messages before the merged message\r\n    const messagesBeforeMerged = messages.slice(\r\n      0,\r\n      Math.min(activeIndex, overIndex)\r\n    );\r\n\r\n    // Determine how many new messages to generate\r\n    const messagesToGenerateCount =\r\n      messages.length - messagesBeforeMerged.length - 2; // Adjusted to -1 to account for merged message being removed,, MIGHT NEED TO -2!!\r\n\r\n    // Generate new messages asynchronously\r\n    const startingSender = getOppositeSender(mergedMessage.sender);\r\n    const newReplies = [];\r\n\r\n    for (let i = 0; i < messagesToGenerateCount; i++) {\r\n      const sender =\r\n        i % 2 === 0 ? startingSender : getOppositeSender(startingSender);\r\n\r\n      // Build the message history up to this point\r\n      const messageHistory = [\r\n        ...messagesBeforeMerged.map((msg) => ({\r\n          role: msg.sender === 'user' ? 'user' : 'assistant',\r\n          content: msg.text,\r\n        })),\r\n        {\r\n          role: mergedMessage.sender === 'user' ? 'user' : 'assistant',\r\n          content: mergedMessage.text,\r\n        },\r\n        ...newReplies.map((msg) => ({\r\n          role: msg.sender === 'user' ? 'user' : 'assistant',\r\n          content: msg.text,\r\n        })),\r\n      ];\r\n\r\n      // Generate the next message using the appropriate API\r\n      let newMessage;\r\n      if (sender === 'user') {\r\n        newMessage = await generateFutureUserMessage(messageHistory);\r\n      } else {\r\n        newMessage = await generateFutureBotMessage(messageHistory);\r\n      }\r\n\r\n      if (newMessage) {\r\n        newReplies.push(newMessage);\r\n      } else {\r\n        // Stop generating messages if there's an error\r\n        break;\r\n      }\r\n    }\r\n\r\n // Assemble the updated messages with fade-in effect\r\nconst finalMessages = [\r\n  ...updatedMessages,\r\n  mergedMessage,\r\n  ...newReplies,\r\n];\r\n\r\nreturn finalMessages;\r\n};\r\n\r\n  // Drag event handlers\r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    setActiveId(active.id);\r\n  };\r\n\r\n  const handleDragEnd = async (event) => {\r\n    const { active, over } = event;\r\n\r\n    setActiveId(null);\r\n\r\n    if (!over || active.id === over.id) {\r\n      return;\r\n    }\r\n\r\n    console.log('Dropped over:', over.id);\r\n\r\n    let reorderedMessages;\r\n\r\n    // If dropped over the trash can\r\n    if (over.id === 'trash-drop') {\r\n      reorderedMessages = messages.filter((msg) => msg.id !== active.id);\r\n      setMessages(updateMessageOrder(reorderedMessages));\r\n      return;\r\n    }\r\n    // If dropped over another message, merge them\r\n    else {\r\n      const activeIndex = messages.findIndex((msg) => msg.id === active.id);\r\n      const overIndex = messages.findIndex((msg) => msg.id === over.id);\r\n\r\n      const isOverThreshold =\r\n        over.rect.top + over.rect.height * 0.7 >\r\n        active.rect.current.translated.top;\r\n\r\n      if (isOverThreshold) {\r\n        // Merge messages and generate new ones via API\r\n        reorderedMessages = await mergeAndUpdateMessages(\r\n          messages,\r\n          active.id,\r\n          over.id\r\n        );\r\n      } else {\r\n        // Simple reorder\r\n        reorderedMessages = arrayMove(messages, activeIndex, overIndex);\r\n      }\r\n\r\n      setMessages(updateMessageOrder(reorderedMessages));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-box\">\r\n      <DndContext\r\n        collisionDetection={rectIntersection}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <SortableContext\r\n          items={messages.map((message) => message.id)}\r\n          strategy={verticalListSortingStrategy} // Use vertical list sorting strategy\r\n        >\r\n          <div className=\"messages-container\">\r\n            {messages.map((message) => (\r\n              <SortableMessageBubble\r\n                key={message.id}\r\n                message={message}\r\n                activeId={activeId}\r\n              />\r\n            ))}\r\n\r\n            {/* Render trash can if something is being dragged */}\r\n            {activeId && <TrashCan />}\r\n          </div>\r\n        </SortableContext>\r\n        <DragOverlay>\r\n          {activeId ? (\r\n            messages.find((message) => message.id === activeId) ? (\r\n              <MessageBubble\r\n                message={messages.find((message) => message.id === activeId)}\r\n                isDragging={true}\r\n              />\r\n            ) : null\r\n          ) : null}\r\n        </DragOverlay>\r\n      </DndContext>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}