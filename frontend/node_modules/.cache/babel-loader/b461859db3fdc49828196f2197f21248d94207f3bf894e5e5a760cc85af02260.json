{"ast":null,"code":"var _jsxFileName = \"/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox_2.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// this is the component that renders the chat window and the input box\n// this\n\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // List of random bot replies\n  const randomReplies = [\"I see. That's interesting.\", \"Can you tell me more about that?\", \"Okay, got it!\"];\n\n  // Initialize the chat with a bot message when the component mounts\n  useEffect(() => {\n    const initialMessage = {\n      id: Date.now().toString(),\n      text: 'Hello, how can I help you today?',\n      sender: 'bot',\n      number: 0 // Starting number for the first message\n    };\n    setMessages([initialMessage]);\n  }, []);\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleSendMessage = () => {\n    const userNumber = parseInt(inputValue.trim(), 10);\n    if (isNaN(userNumber)) return; // only proceed if input is a valid number\n\n    const newUserMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n      number: userNumber // store user input number\n    };\n    setMessages(prevMessages => [...prevMessages, {\n      ...newUserMessage,\n      order: prevMessages.length + 1\n    }]);\n    setInputValue('');\n\n    // Bot reply with a random response from the list\n    setTimeout(() => {\n      const randomReply = randomReplies[Math.floor(Math.random() * randomReplies.length)];\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: randomReply,\n        // bot replies with a random reply\n        sender: 'bot',\n        number: userNumber + 1 // store bot reply number\n      };\n      setMessages(prevMessages => [...prevMessages, {\n        ...botReply,\n        order: prevMessages.length + 1\n      }]);\n    }, 1000);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    if (active.id !== over.id) {\n      const oldIndex = messages.findIndex(msg => msg.id === active.id);\n      const newIndex = messages.findIndex(msg => msg.id === over.id);\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n\n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => {\n        // Shift the number of each message after reorder (both user and bot)\n        return {\n          ...msg,\n          number: index + 1,\n          // update the number based on new index\n          text: `${index + 1}`,\n          // update the text to reflect the new number\n          order: index + 1 // update the order to maintain sorting\n        };\n      });\n      setMessages(reorderedMessages);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(DndContext, {\n      collisionDetection: closestCenter,\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(SortableContext, {\n        items: messages,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-container\",\n          children: messages.map(message => /*#__PURE__*/_jsxDEV(SortableMessageBubble, {\n            message: message\n          }, message.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Type a number...\",\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"GG/YeSFNrWOWKG591Wbb47E4YjM=\");\n_c = ChatBox;\nexport default ChatBox;\nconst SortableMessageBubble = ({\n  message\n}) => {\n  _s2();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: message.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: /*#__PURE__*/_jsxDEV(MessageBubble, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s2(SortableMessageBubble, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n  return [useSortable];\n});\n_c2 = SortableMessageBubble;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChatBox\");\n$RefreshReg$(_c2, \"SortableMessageBubble\");","map":{"version":3,"names":["React","useState","useEffect","DndContext","closestCenter","arrayMove","SortableContext","useSortable","CSS","MessageBubble","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","inputValue","setInputValue","randomReplies","initialMessage","id","Date","now","toString","text","sender","number","handleInputChange","e","target","value","handleSendMessage","userNumber","parseInt","trim","isNaN","newUserMessage","prevMessages","order","length","setTimeout","randomReply","Math","floor","random","botReply","handleDragEnd","event","active","over","oldIndex","findIndex","msg","newIndex","newMessages","reorderedMessages","map","index","className","children","collisionDetection","onDragEnd","items","message","SortableMessageBubble","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onKeyPress","key","onClick","_c","_s2","attributes","listeners","setNodeRef","transform","transition","style","Transform","ref","_c2","$RefreshReg$"],"sources":["/Users/churuiliu/Desktop/chatbot-app/frontend/src/components/ChatBox_2.js"],"sourcesContent":["// this is the component that renders the chat window and the input box\n// this\n\nimport React, { useState, useEffect } from 'react';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext } from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport MessageBubble from './MessageBubble';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // List of random bot replies\n  const randomReplies = [\n    \"I see. That's interesting.\",\n    \"Can you tell me more about that?\",\n    \"Okay, got it!\"\n  ];\n\n  // Initialize the chat with a bot message when the component mounts\n  useEffect(() => {\n    const initialMessage = {\n      id: Date.now().toString(),\n      text: 'Hello, how can I help you today?',\n      sender: 'bot',\n      number: 0, // Starting number for the first message\n    };\n    setMessages([initialMessage]);\n  }, []);\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    const userNumber = parseInt(inputValue.trim(), 10);\n    if (isNaN(userNumber)) return; // only proceed if input is a valid number\n\n    const newUserMessage = {\n      id: Date.now().toString(),\n      text: inputValue,\n      sender: 'user',\n      number: userNumber, // store user input number\n    };\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { ...newUserMessage, order: prevMessages.length + 1 },\n    ]);\n    setInputValue('');\n\n    // Bot reply with a random response from the list\n    setTimeout(() => {\n      const randomReply = randomReplies[Math.floor(Math.random() * randomReplies.length)];\n      const botReply = {\n        id: (Date.now() + 1).toString(),\n        text: randomReply, // bot replies with a random reply\n        sender: 'bot',\n        number: userNumber + 1, // store bot reply number\n      };\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { ...botReply, order: prevMessages.length + 1 },\n      ]);\n    }, 1000);\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      const oldIndex = messages.findIndex((msg) => msg.id === active.id);\n      const newIndex = messages.findIndex((msg) => msg.id === over.id);\n\n      const newMessages = arrayMove(messages, oldIndex, newIndex);\n\n      // Reorder the messages and update the order numbers\n      const reorderedMessages = newMessages.map((msg, index) => {\n        // Shift the number of each message after reorder (both user and bot)\n        return {\n          ...msg,\n          number: index + 1, // update the number based on new index\n          text: `${index + 1}`, // update the text to reflect the new number\n          order: index + 1, // update the order to maintain sorting\n        };\n      });\n\n      setMessages(reorderedMessages);\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext items={messages}>\n          <div className=\"messages-container\">\n            {messages.map((message) => (\n              <SortableMessageBubble key={message.id} message={message} />\n            ))}\n          </div>\n        </SortableContext>\n      </DndContext>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Type a number...\"\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n        />\n        <button onClick={handleSendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n\nconst SortableMessageBubble = ({ message }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: message.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n      <MessageBubble message={message} />\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}